<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>seyvoue</title>
  
  <subtitle>ABC-Always Be Coding.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://seyvoue.com/"/>
  <updated>2019-09-26T12:55:57.371Z</updated>
  <id>http://seyvoue.com/</id>
  
  <author>
    <name>seyvoue</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>@CentOS7下安装Nginx</title>
    <link href="http://seyvoue.com/%E6%9C%AA%E5%88%86%E7%B1%BB/e3099e01.html"/>
    <id>http://seyvoue.com/未分类/e3099e01.html</id>
    <published>2019-09-26T12:55:57.000Z</published>
    <updated>2019-09-26T12:55:57.371Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="未分类" scheme="http://seyvoue.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>@yum离线下载安装软件包</title>
    <link href="http://seyvoue.com/manual/1281edc4.html"/>
    <id>http://seyvoue.com/manual/1281edc4.html</id>
    <published>2019-06-08T12:56:28.000Z</published>
    <updated>2019-06-09T07:11:51.715Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>问题：</strong>如何在不能联网且缺少 yum 源的 redhat/centos 机器中搭建 gitlab 服务器？如何才能解决安装 gitlab 时，缺失相关依赖包的问题？</p></blockquote><p><strong>解决方案：</strong>在一台可以联网的机器中，下载好所有安装包，再导入到不可联网的机器中，通过 <code>rpm -ivh</code> 的方式进行安装。（这台可联网的机器应该与不可联网的机器操作系统版本及其内核版本一致，且最好是初始安装的系统，可通过 docker/虚拟机的方式临时配置一台）</p><a id="more"></a><p>step1. 安装 <code>yum-plugin-downloadonly</code> 插件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y yum-plugin-downloadonly</span><br></pre></td></tr></table></figure></p><p>安装完成后，在使用 yum 的时候使用 <code>--downloadonly</code> 参数。这个参数将告诉yum只下载程序包，不进行安装，而且可在控制台中看到安装该包所需要的所有依赖，如，下载 <code>openssh-server</code>包：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install --downloadonly openssh-server -y</span><br></pre></td></tr></table></figure></p><p>注：<code>--downloadonly</code>参数将自动下载程序包安装时所需要的所有依赖，所以建议在全新的系统中使用本命令，因为在已经安装过部分依赖的系统上，yum 不会将所有需要的依赖下载完全<br>此时要下载的程序包已经被放置到了 yum 的默认存放位置，在 <code>CentOS 6 x86_64</code> 下，这个默认路径是：<code>/var/cache/yum/x86_64/6/&lt;repo&gt;/packages/</code><br>如果要指定 yum 的下载目录，还需要一个 <code>--downloaddir</code> 参数，如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost~ ]# yum install —downloadonly —downloaddir=. openssh-server -y</span><br></pre></td></tr></table></figure></p><p>结果如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/c1gd7.png" alt=""></p><p>可以看到安装包已经下载到当前目录下了：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/imioy.png" alt=""></p><p>下载完成后，在不可联网的机器执行下面的命令进行安装：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rpm -ivh openssh-server-5.3p1-124.el6_10.x86_64.rpm \</span><br><span class="line">openssh-5.3p1-124.el6_10.x86_64.rpm \</span><br><span class="line">openssh-askpass-5.3p1-124.el6_10.x86_64.rpm \</span><br><span class="line">openssh-clients-5.3p1-124.el6_10.x86_64.rpm \</span><br><span class="line">openssl-1.0.1e-57.el6.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>参考文献</p><ul><li><a href="https://www.yanning.wang/archives/664.html" target="_blank" rel="noopener">CentOS 7 Yum离线下载安装软件包</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;问题：&lt;/strong&gt;如何在不能联网且缺少 yum 源的 redhat/centos 机器中搭建 gitlab 服务器？如何才能解决安装 gitlab 时，缺失相关依赖包的问题？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;在一台可以联网的机器中，下载好所有安装包，再导入到不可联网的机器中，通过 &lt;code&gt;rpm -ivh&lt;/code&gt; 的方式进行安装。（这台可联网的机器应该与不可联网的机器操作系统版本及其内核版本一致，且最好是初始安装的系统，可通过 docker/虚拟机的方式临时配置一台）&lt;/p&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="linux" scheme="http://seyvoue.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>@CentOS6下搭建 gitlab</title>
    <link href="http://seyvoue.com/manual/20173b43.html"/>
    <id>http://seyvoue.com/manual/20173b43.html</id>
    <published>2019-06-08T12:56:02.000Z</published>
    <updated>2019-06-09T07:11:51.708Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>step1. 安装相关的依赖<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y curl policycoreutils-python openssh-server cronie</span><br></pre></td></tr></table></figure></p><p>step2. 安装邮件服务，亦可使用别的邮件服务，如：<code>smtp</code> 等，可参考<a href="https://docs.gitlab.com/omnibus/settings/smtp.html" target="_blank" rel="noopener">此文</a>。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y postfix</span><br><span class="line">[root@localhost ~]# service postfix start</span><br><span class="line">[root@localhost ~]# chkconfig postfix on</span><br></pre></td></tr></table></figure></p><p>step3. 安装 gitlab<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 下载安装脚本，配置gitlab 源</span><br><span class="line">[root@localhost ~]# curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | bash</span><br><span class="line"><span class="meta">#</span> 安装 gitlab-ee</span><br><span class="line">[root@localhost ~]# yum install -y gitlab-ee</span><br></pre></td></tr></table></figure></p><p>step4. 修改 <code>/etc/gitlab/gitlab.rb</code>，配置 gitlab 并启动<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vi</span> /etc/gitlab/gitlab.rb</span><br><span class="line">#修改访问地址以及默认端口，为如下：</span><br><span class="line">external_url <span class="string">'http://gitlab.seyvoue.com'</span></span><br><span class="line">unicorn[<span class="string">'port'</span>] = <span class="number">18080</span></span><br><span class="line">#初始化 gitlab</span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line">#启动 gitlab</span><br><span class="line">gitlab-ctl start</span><br><span class="line">#查看 gitlab 状态</span><br><span class="line">gitlab-ctl status</span><br></pre></td></tr></table></figure></p><p>step5. 若 gitlab 布置在虚拟机中，需要在宿主机 <code>hosts</code> 文件增加：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虚拟机IP external_url</span><br></pre></td></tr></table></figure></p><p>step6. 验证。在浏览器中访问 <code>http://gitlab.seyvoue.com/</code> 即可</p><p>参看链接</p><ul><li><a href="https://about.gitlab.com/install/#centos-6" target="_blank" rel="noopener">Omnibus package installation</a></li><li><a href="https://www.jianshu.com/p/43860be68b52" target="_blank" rel="noopener">从零开始搭建Gitlab服务器</a></li><li><a href="https://www.jianshu.com/p/3507d8b2ac87" target="_blank" rel="noopener">搭建Gitlab+maven+jenkins持续集成环境</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;step1. 安装相关的依赖&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/p
      
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="git" scheme="http://seyvoue.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>@CentOS6下安装配置jenkins</title>
    <link href="http://seyvoue.com/manual/77bc273.html"/>
    <id>http://seyvoue.com/manual/77bc273.html</id>
    <published>2019-06-08T12:55:39.000Z</published>
    <updated>2019-06-09T07:11:51.715Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>step1. 安装 Jenkins<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install jenkins</span><br><span class="line"><span class="meta">#</span>查看 Jenkins 安装路径</span><br><span class="line">[root@localhost ~]# rpm -ql jenkins</span><br></pre></td></tr></table></figure></p><p>step2. 修改默认端口 <code>8080</code><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="keyword">vi</span> /etc/sysconfig/jenkins</span><br><span class="line">:<span class="keyword">set</span> ignorecase</span><br><span class="line">/jenkins_port</span><br><span class="line">JENKINS_PORT=“<span class="number">8000</span>”</span><br></pre></td></tr></table></figure></p><p>注：若本机的 jdk 环境并非使用的是系统自带的 openjdk，而是通过在 /etc/profile 等中配置环境变量的方式安装的 jdk 环境的话，需要在 <code>/etc/init.d/jenkins</code> 中添加你自己安装的 jdk 路劲，<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="keyword">vi</span> /etc/init.d/jenkins</span><br><span class="line">candidates=<span class="comment">"</span></span><br><span class="line">/usr/local/jdk1.<span class="number">8.0</span>_121/bin/java &lt;==在这里添加你的 jdk 路径</span><br><span class="line">/etc/alternatives/java</span><br><span class="line">/usr/lib/jvm/java-<span class="number">1.8</span>.<span class="number">0</span>/bin/java</span><br><span class="line">/usr/lib/jvm/jre-<span class="number">1.8</span>.<span class="number">0</span>/bin/java</span><br><span class="line">/usr/lib/jvm/java-<span class="number">1.7</span>.<span class="number">0</span>/bin/java</span><br><span class="line">/usr/lib/jvm/jre-<span class="number">1.7</span>.<span class="number">0</span>/bin/java</span><br><span class="line">/usr/bin/java</span><br><span class="line"><span class="comment">"</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;step1. 安装 Jenkins&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="jenkins" scheme="http://seyvoue.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>@CentOS6.4下安装 docker</title>
    <link href="http://seyvoue.com/manual/9cb3f9b7.html"/>
    <id>http://seyvoue.com/manual/9cb3f9b7.html</id>
    <published>2019-06-08T12:55:01.000Z</published>
    <updated>2019-09-12T05:25:45.325Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><p>step1. 创建用户 <code>user</code>，用于之后 docker 启动、停止、运行的默认用户<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>创建用户 user</span><br><span class="line">[root@localhost ~]# useradd user</span><br><span class="line">[root@localhost ~]# passwd user</span><br><span class="line"><span class="meta">#</span>给 user sudo 权限</span><br><span class="line">[root@localhost ~]# visudo</span><br><span class="line">add the following line</span><br><span class="line">user   ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure></p><p>step2. 配置 docker yum 源<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/yum.repo.d/docker.repo</span><br><span class="line">[docker-repo]</span><br><span class="line">name=Docker Repo</span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br></pre></td></tr></table></figure></p><p>step3. 安装 <code>docker-engine</code>，并将其配置为系统服务<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# su - user</span><br><span class="line">[user@localhost ~]$ sudo yum install docker-engine</span><br><span class="line">[user@localhost ~]$ sudo chkconfig docker on</span><br><span class="line">[user@localhost ~]$ sudo service docker start</span><br><span class="line">[user@localhost ~]$ sudo service docker status</span><br><span class="line">docker (pid 3389) is running…</span><br><span class="line">[user@localhost ~]$ ps aux | grep docker</span><br><span class="line">root       3189  3.0  0.5 466152 22552 ?        Sl   05:26   0:16 /usr/bin/docker -d</span><br><span class="line">user       3568  0.0  0.0 103232   864 pts/0    S+   05:35   0:00 grep docker</span><br></pre></td></tr></table></figure></p><p>注：若出现以下情况，需要升级 <code>device-mapper-libs</code> 包，如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[user@localhost ~]$ sudo service docker stauts</span><br><span class="line">docker dead but pid exists</span><br><span class="line"><span class="meta">#</span>若出现以上的情形，可以通过升级 device-mapper-libs 包，或者 yum update -y 的方式更细系统版本到最新版本</span><br><span class="line">[user@localhost ~]$ sudo yum update -y device-mapper-libs</span><br></pre></td></tr></table></figure></p><p>step4. 将 <code>user</code> 添加到 <code>docker</code> 用户组中，并验证是否可通过 <code>user</code> 用户使用 docker 基本功能<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[user@localhost ~]$ sudo usermod -aG docker user</span><br><span class="line">[user@localhost ~]$ id user</span><br><span class="line">uid=501(user) gid=501(user) groups=501(user),492(docker)</span><br><span class="line"><span class="meta">#</span>切到 root 用户停止 docker 服务</span><br><span class="line">[user@localhost ~]$ exit</span><br><span class="line">[root@localhost ~]# service docker stop</span><br><span class="line"><span class="meta">#</span>切回到 user 用户，验证是否可使用 docker 基本功能</span><br><span class="line">[root@localhost ~]# su - user</span><br><span class="line">[user@localhost ~]$ sudo service docker restart</span><br><span class="line">[user@localhost ~]$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br></pre></td></tr></table></figure></p><p>step5. 下载 centos 镜像，创建并启动容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[user@localhost ~]$ docker pull centos:centos6</span><br><span class="line">[user@localhost ~]$ docker pull centos:latest</span><br><span class="line">[user@localhost ~]$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">centos              centos6             4f2ed42dccff        12 weeks ago        193.9 MB</span><br><span class="line">centos              latest              ee2526f4865b        12 weeks ago        201.8 MB</span><br><span class="line">[user@localhost ~]$ docker run -it —name test_docker centos:centos6 /bin/bash</span><br><span class="line">[root@34d076f4dac3 /]# exit</span><br><span class="line">exit</span><br><span class="line">[user@localhost ~]$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">34d076f4dac3        4f2ed42dccff        &quot;/bin/bash&quot;         14 seconds ago      Exited (0) 3 seconds ago                       test_docker</span><br></pre></td></tr></table></figure></p><p>参考文献</p><ul><li><a href="http://mazzakolinux.com/7066-2/" target="_blank" rel="noopener">Install docker on CentOS 6 or 7</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;step1. 创建用户 &lt;code&gt;user&lt;/code&gt;，用于之后 docker 启动、停止、运行的默认用户&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="docker" scheme="http://seyvoue.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>@构建第二大脑的方法：借助 Evernote 和 OmniFocus</title>
    <link href="http://seyvoue.com/manual/1b43f668.html"/>
    <id>http://seyvoue.com/manual/1b43f668.html</id>
    <published>2019-03-24T12:45:44.000Z</published>
    <updated>2019-06-09T07:11:51.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>构建第二大脑的重要性？</p><p>影片 <a href="https://movie.douban.com/subject/3041269/" target="_blank" rel="noopener">永无止境</a> 男主角一开始是一位郁郁不得志的小说家，直到某天服下一种药物 NZT，忽然成为文思泉涌、判断力与创造力惊人的天才，有趣的是，这颗药丸到底带给原本二流小说家什么效用呢？</p><p>我的解读是，这粒药丸的作用是让男主可以在每次需要的时候想起一生所学习、经历、阅读、思考过的所有内容，并在大脑内重新组织连接，于是当他写小说时可以旁微博引自己过去所有累积的资料，当他分析股市时可以统整过去所有的案例来做出更好的分析，简单来说，这粒药丸让男主：</p><blockquote><p>把过去所有的积累，善用到每一个当下情境</p></blockquote><a id="more"></a><p><strong>不是我沒有才能，而是我沒有善用自己過去的积累：</strong><br>其实我们大多数人就像是 「永无止境」电影里一开始的男主角，或许觉得自己缺乏创意、觉得自己效率低下，但这并不表示我们才能不足，而很有可能是因为我们 「没有办法善用自己过去的积累」：</p><blockquote><p>文章需要多一個引文，却忘记自己几年前读过的书里面有相关的资料<br>企划需要一个新想法，却忘记自己几年前有相似的思考与笔记<br>问题需要一个解决方案，却忘记自己曾遇过、看过类似问题并解决掉<br>工作需要一个新计划，却没有善用自己过去曾做过的类似工作架构</p></blockquote><p><strong>工作与思考上的双重时间浪费：</strong><br>比起「重新去找」、「从头再想」，遇到什麼工作都先开始找新资料、新方法，却没有好好珍惜与利用之前花时间积累的东西，相当于「双重时间浪费」：浪費了过去认真努力过的时间，也浪费了现在必须从头努力的时间。</p><p>要怎样解决这个问题呢？拥有「第二大脑」这样的知识库就是必要的。让我们的第一大脑，与透过工具构建的「第二大脑」同时运作，就类似「永无止境」电影里吃了药的男主角一样，当我们可以跟过去的自己取经，并且在翻越高山时永远都「先从已经积累的地方开始往上爬」，那么我们就可以持续的向上前进，而不会每次都要从头开始踏步。</p><p>本文将与大家分享的是我如何利用 evernote 构建第二大脑的实践经验。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>目标：</strong></p><ul><li>把过去自己所有的累积，善用到当下每一个情境</li><li>给大脑减负，让其承担“CPU”和“内存”的角色，工具承担“硬盘”角色</li><li>每天的工作始于印象笔记终于印象笔记</li></ul><p><strong>方案：</strong></p><ul><li>将自己所有的阅读、学习、思考、想法、计划和资料都放入 evernote 中</li><li>通过 evernote 的笔记本+标签（轻分组重标签），构建网状的知识结构</li><li>使用搜索功能，获得过往经验/知识</li><li>借助GTD工具如 OmniFocus，与 evernote 协同工作，以更好的管理时间，让计划/任务可以高效顺利的完成。</li></ul><p><strong>下文将从以下几个方面进行展开：</strong></p><ul><li>如何搭建一个系统化的笔记框架？包括笔记本如何分类，标签系统如何构建</li><li>如何打通 evernote 和 OmniFocus？通过 evernote 中的 GTD 标签，借助 IFTTT 工具，将 evernote 和 OmniFocus 连接</li><li>如何利用好这个笔记框架？使其在一定程度上成为“第二大脑”</li></ul><blockquote><p>注：evernote 对应知识管理，OmniFocus 对应时间管理</p></blockquote><p>下面的导图即为最终的笔记框架，你可以根据本文的方法构建一套属于你自己的：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/cbjik.png" alt=""></p><h2 id="“第二大脑”的特性"><a href="#“第二大脑”的特性" class="headerlink" title="“第二大脑”的特性"></a>“第二大脑”的特性</h2><p>这部分描述我们所构建的“第二大脑”—— evernote，应该具备哪些特性（是什么样的？），有什么作用。</p><ul><li>是行动指南</li></ul><blockquote><p>当我们打开 evernote 时，我们便可以知道在未来一段时间（短期/长期），我们需要做什么，如何做</p></blockquote><ul><li>是收藏夹</li></ul><blockquote><p>我们可以将自己的灵感、想法、思考、欲望清单（想买、想去、想看等）、会议记录、读书笔记、学习笔记，有价值的帖子、资料，快速的记录/收藏到 evernote 中</p></blockquote><ul><li>是工作室</li></ul><blockquote><p>当有一个项目、长期计划、复杂的任务等需要我们投入大块时间去专注完成的时候</p></blockquote><ul><li>是知识库（第二大脑的核心）</li></ul><blockquote><p>单纯的累积或收集也会有帮助，但那终究是他人的，你需要的是一个 「自己曾经思考过的」 个人知识库，一个更完整、并且可以随时向它取经的「过去的自己」。</p></blockquote><h2 id="笔记本分类策略"><a href="#笔记本分类策略" class="headerlink" title="笔记本分类策略"></a>笔记本分类策略</h2><p><strong>笔记本分类原则：</strong></p><ul><li>不要将笔记本作为分类笔记的载体，应该将其当做我们工作流中的一环。（因为若以笔记本作为分类笔记的主体，最终的结果是得到一个树状结构的知识库，显然这并不是一个好的策略）</li><li>让笔记本的分类，一定程度上代表笔记的加工程度。比如：对于直接从微信公众号剪藏过来的笔记，就是未经过加工处理过的，不要偷懒的以为一篇有价值的文章被你收藏到笔记本中就属于你了，这篇笔记中的内容也许当下你已经理解/消化了，但并不表示未来的某一刻，当你真正需要它的时候，它就能再次的出现在你的面前，你需要将它纳入到你的知识体系中，并可被索引到。</li></ul><blockquote><p>印象笔记工作流：计划 -&gt; 收集 -&gt; 练习 -&gt; 归档 -&gt; 分享 -&gt; 总结</p></blockquote><p>首先制定计划，明确要做什么，并制定行动指南；然后在执行的过程中，你需要收集资料/他人的经验，或者记录下突然冒出的想法/灵感；通过不断的投入时间/精力，不断的学习和总结；最终完成制定的一项项计划/任务，并将最终的结果/总结/经验存档；通过各种形式分享给他人以反哺，并定期反思/回顾过去一段时间的学习，以此形成一个闭环。</p><p>根据以上的工作流，我将笔记本分为了<strong>七大类</strong>：</p><ul><li><strong>0Ability</strong></li></ul><p>这个笔记本组对应「计划」这个工作流。我是根据我希望具备的能力这个粒度进行分类的，比如：专业、工具控等等 </p><ul><li><strong>1Inbox</strong></li></ul><p>这个笔记本组对应「收集」这个工作流。我是根据信息的来源、原创与否进行分类的，比如：剪藏、快速笔记、灵感等。</p><ul><li><strong>2Workspace</strong></li></ul><p>这个笔记本组对应「练习」这个工作流。选择使用「练习」这个词是受到格拉德威尔《异类》一书中提出的「一万小时定律」（<strong>刻意的训练</strong>）的启发，只是在这里，我将近期我需要投入大量时间/精力的内容，以项目/专题为粒度放入这个笔记本组中，当我完成后便从该笔记本组中移除并归档，以表示我完成了并从形式上表征我最近需要做的几件比较重要的事。 </p><ul><li><strong>3KnowledgeBase</strong></li></ul><p>这个笔记本组对应「归档」这个工作流。以“知识库”命名，是因为该笔记本组中的所有笔记均经过分类和消化最终纳入到自己构建的知识体系中了，每一篇均有再利用的价值，且很容易的被搜索到。</p><ul><li><strong>4Share</strong></li></ul><p>这个笔记本组对应「分享」这个工作流。将学习成果/经验分享到博客，分享是最好的学习检验。</p><ul><li><strong>5Review</strong></li></ul><p>这个笔记本组对应「总结」这个工作流。像什么月度总结、年度总结都在这里。</p><ul><li><strong>[Archive]</strong></li></ul><p>设立这个笔记本组，是为了将形成 「知识库」的中间产物，以及之前制定的计划和行动指南封存。一方面就是单纯的将过去封存，另一方面也是写总结报告的参考来源。</p><p><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/7701b.png" alt=""></p><p>以上笔记本中有两个特殊笔记本 <code>11Memo</code> 和 <code>[DayLog]</code>，前者记录灵感，后者相当于日志（不是日记，相当于流水账），这两个笔记本中的笔记我是借助 <code>alfred</code> 工具，自动产生的。</p><blockquote><p>比如：我在网上冲浪的时候，突然冒出了某个想法，此时我只需要，连按两下 <code>option</code>键，就会弹出 <code>Alfred</code>，然后我只需要记录我当下的想法，便会在 <code>evernote</code> 的 <code>11Memo</code> 笔记本中自动记录下这个内容，并会附带时间戳以及正打开的那个网页，当我未来某一天将这个想法落地后，我还以在时间戳前面的框框中打上 ✅，非常方便。如下图：</p></blockquote><p><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/l0wqf.png" alt=""><br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/43wcc.png" alt=""></p><h2 id="标签系统构建策略"><a href="#标签系统构建策略" class="headerlink" title="标签系统构建策略"></a>标签系统构建策略</h2><p>笔记本承担了工作流的载体，标签则承担了将笔记连接成更易检索的网状结构的载体。</p><p>虽然即使我们没有打好标签，依旧可以从 evernote 中搜索到部分我们所需要的内容，但随着时间的推移和笔记数量的增多，若前期没有规划好标签，那些曾经的笔记将会石沉大海很难再检索到。</p><blockquote><p>比如，在使用 evernote 初期，对于剪藏的笔记我都自动保存到默认笔记本中，对于一些比较重要的笔记我也会打上一些跟笔记主题相关的标签，但随着 evernote 体量的增大，仅仅这个默认笔记本就有1000多条，这可如何是好，难道把笔记本重新分类？不打上标签如何证明我看过/消化了？以后又怎么应用和检索这些资料？…</p></blockquote><p>所以最终我决定采用 <code>笔记本+多标签</code> 的形式分类这些笔记，且以“偏重标签”而不是“偏重分组”的方式进行笔记的分类，又对标签系统做了大致的规划，以应对笔记本体量越来越大后无法搜索到需要的相关笔记。</p><h3 id="标签分类原则与方法"><a href="#标签分类原则与方法" class="headerlink" title="标签分类原则与方法"></a>标签分类原则与方法</h3><p><strong>基本使用原则：</strong></p><ul><li>注意歧义：以保证搜索时不会搜索出不相干笔记</li><li>禁用语义比较弱的词（或称用词模糊），如：“服装”标注一本书也在标注流行搭配</li><li>注意同义词标签，如：“苹果手机”和“iphone”</li><li>标签尽量不要与笔记中任何词语重复</li><li>标签不是越多越好</li></ul><p><strong>需要添加什么标签？</strong></p><ul><li>用问题产生标签，如：是什么？为什么？怎么做？…</li><li>思考你希望这条笔记会在哪些场景下被搜索到。如：当你在准备一次培训时，你在网上发现了一篇帖子可被用到培训中，那么你需要给这篇笔记贴上，“素材”、“xxx培训”等标签</li><li>重点不是看到上面，而是想到什么</li></ul><p><strong>如何判断是否有必要添加标签？</strong></p><ul><li>如果一条笔记即使不添加标签，也能确保下次当需要它的时候也可被搜索到，则可以不添加标签</li><li>当一篇笔记你觉得不需要添加标签的时候，你就要考虑这篇笔记是否有存在 evernote 中的必要了<br>标签的格式？</li><li>能用中文就不要用英文，用英文就全用小写</li><li>能用全程就尽量不要用简称，根据出现频率和检索习惯来</li><li>注意标签中若带有符号，不要与搜索语法有冲突，如：*, -等</li><li>标签中的符号都应以英文状态下输入。如：不要出现【】，而应该是[]</li><li>每个便签最好都在最前面打上通配符，如此便不仅可以让标签按照你所希望的顺序在标签系统中排列，还可以让你更快的打上标签。如：在标签名最前面加上 “.”, “@“, “~”等通配符</li></ul><h3 id="标签分类方案"><a href="#标签分类方案" class="headerlink" title="标签分类方案"></a>标签分类方案</h3><p>首先对于 evernote 中的笔记我划分了<strong>两大类</strong>：</p><ul><li>原创：这部分笔记最终都会归入到 30Library 笔记本中</li><li>非原创：这部分笔记会先默认保存到 12Clipped 笔记本中，打过标签后最终都会归入 31References 中</li></ul><p>其次对于标签系统，我将所有的标签分为<strong>三大类</strong>：<br>（标签的具体分类见最前面）</p><ul><li>.description<br>描述信息类标签。这类标签类似于 html 网页中的 meta，分别从 <code>rating</code>, <code>what</code>, <code>when</code>, <code>where</code>, <code>who</code>几个维度描述这条笔记</li><li>.projects<br>项目类标签。区别于 <code>2Workspace</code> 笔记本，笔记本中仅仅只存放了与项目相关的原创笔记，而标签中的笔记还包含了非原创的笔记，而且当项目完成后，<code>2Workspace</code> 中的项目笔记本是会被移除的最终所有与项目相关的笔记、收集的文章等都会打上对应的项目标签</li><li>.keywords<br>关键词类标签。为笔记打上与其文章主旨相关的标签。</li></ul><p><strong>这里重点探探 <code>.descrption</code> 标签</strong></p><blockquote><p>在收藏一篇文章前，我们要先问问自己，这篇文章的核心价值是什么？</p></blockquote><p>所以，我在 <code>.description</code> 标签下设立了 <code>.what</code> 标签，将文章的核心价值分为了四大类：</p><ul><li>观点</li><li>综述</li><li>手册</li><li>经验</li></ul><p>这样做的目的是通过这个标签组我们可以更快的知道，可以从这条笔记中获得什么：</p><ul><li>获得：一个 idea</li><li>获得：对某件事的整体认识</li><li>获得：对某个问题的解决方法</li><li>获得：获得他人的经验，以对事物有个更深的认识</li></ul><p><code>.projects &gt; .descriptions &gt; .keywords</code> 三类标签以不同的粒度对笔记进行了分类</p><p>下表即为最终的分类方案：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/58mda.png" alt=""></p><h2 id="如何将-evernote-与-OmniFocus-进行连接"><a href="#如何将-evernote-与-OmniFocus-进行连接" class="headerlink" title="如何将 evernote 与 OmniFocus 进行连接"></a>如何将 evernote 与 OmniFocus 进行连接</h2><p>关于如何将 evernote 和 GTD 工具进行连接，见我的另一篇博文。</p><h2 id="如何使用这个笔记框架"><a href="#如何使用这个笔记框架" class="headerlink" title="如何使用这个笔记框架"></a>如何使用这个笔记框架</h2><p>回到我们建立笔记框架的初衷是为了：</p><ul><li>每天的工作始于印象笔记终于印象笔记</li><li>给大脑减负，让其承担“CPU”和“内存”的角色，工具承担“硬盘”角色</li><li>把过去自己所有的累积，善用到当下每一个情境</li></ul><blockquote><p>对于第一点，如何实现？通过笔记本组，这个工作流的载体。</p></blockquote><p>笔记本组的顺序，<code>0Ability -&gt; 1Inbox -&gt; 2Workspace -&gt; 3KnowledgeBase -&gt; 4Share -&gt; 5Review</code>，则代表了工作流 <strong>计划 -&gt; 收集 -&gt; 练习 -&gt; 归档 -&gt; 分享 -&gt; 总结</strong>。</p><p>每当打开 evernote：</p><ul><li><code>0Ability</code> 这个笔记本组，就会提醒我们为之奋斗的目标，以及具体的行动指南</li><li><code>1Inbox</code> 这个笔记本组，则保存了我们收集到的所有资料和想法</li><li><code>2Workspace</code> 这个笔记本组，则是我们工作的地方，如：200项目A，200专题B，201专题A，201项目B…</li><li><code>3KnowledgeBase</code> 这个笔记本组，便是我们的结晶啦，所有自己曾经的知识/经验，都在这儿。</li><li><code>4Share</code> 这个笔记本组，便是我们所分享过的内容的存档</li><li><code>5Review</code> 这个笔记本组，就是定期总结</li></ul><p><strong>所以，我们只需要根据当前处于工作流中的哪一环，就进入相应的笔记本中就可以了。</strong><br>整理笔记的过程，也是你不断学习/总结的过程，这在一定程度上，也帮助你养成持续学习的习惯。<br>另外对于 <code>1Inbox</code> 这个笔记本组，必定是会随着时间的推移，体量越来越大的，你需要定期清理。我是写了一个<code>AppleScript</code>脚本去监控 <code>1Inbox</code> 中的笔记，当达到前文表格中提到的清理周期，便会自动在我的 GTD 工具 <code>OmniFocus</code> 中建立一条待办事项，提醒我去整理笔记。</p><hr><p>脚本 <code>monitor.scpt</code> 如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">tell application &quot;印象笔记&quot;</span><br><span class="line">set tempNums to the length of (find notes of &quot;notebook:10QuickNote&quot;)</span><br><span class="line">set memoNums to the length of (find notes of &quot;notebook:11memo&quot;)</span><br><span class="line">set clippedNums to the length of (find notes of &quot;notebook:12Clipped&quot;)</span><br><span class="line">end tell</span><br><span class="line"></span><br><span class="line">on newInboxTask(taskName)</span><br><span class="line">tell application &quot;OmniFocus&quot;</span><br><span class="line">tell default document</span><br><span class="line">set theTask to make new inbox task with properties &#123;name:taskName&#125;</span><br><span class="line">set tagName to make new tag with properties &#123;name:&quot;Today&quot;&#125;</span><br><span class="line">add tagName to tags of theTask</span><br><span class="line">end tell</span><br><span class="line">end tell</span><br><span class="line">end newInboxTask</span><br><span class="line"></span><br><span class="line">if tempNums &gt; 5 then</span><br><span class="line">display notification &quot;整理10QuickNote&quot; with title &quot;印象笔记&quot;</span><br><span class="line">set taskName to &quot;印象笔记：整理 10QuickNote&quot;</span><br><span class="line">newInboxTask(taskName)</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">if memoNums &gt; 3 then</span><br><span class="line">display notification &quot;整理11Memo&quot; with title &quot;印象笔记&quot;</span><br><span class="line">set taskName to &quot;印象笔记：整理 11Memo&quot;</span><br><span class="line">newInboxTask(taskName)</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">if clippedNums &gt; 30 then</span><br><span class="line">display notification &quot;整理12Clipped&quot; with title &quot;印象笔记&quot;</span><br><span class="line">set taskName to &quot;印象笔记：整理 12Clipped&quot;</span><br><span class="line">newInboxTask(taskName)</span><br><span class="line">end if</span><br></pre></td></tr></table></figure></p><p>然后加了个定时任务，命令行执行<code>crontab -e</code>，该定时任务每四天的22:30执行一次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 22 */4 * * osascript ~/scripts/monitor.scpt &gt;&gt; /Users/seyvoue/personal/data/scripts/logs/applescript.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://michaelhyatt.com/evernote-tags/" target="_blank" rel="noopener">How I Organize Evernote？——A Peek Inside My Personal System</a></li><li><a href="https://www.playpcesor.com/2015/05/take-good-note-by-evernote.html" target="_blank" rel="noopener">一种帮你理出头绪的笔记模版：三层空间格式法</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;构建第二大脑的重要性？&lt;/p&gt;
&lt;p&gt;影片 &lt;a href=&quot;https://movie.douban.com/subject/3041269/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;永无止境&lt;/a&gt; 男主角一开始是一位郁郁不得志的小说家，直到某天服下一种药物 NZT，忽然成为文思泉涌、判断力与创造力惊人的天才，有趣的是，这颗药丸到底带给原本二流小说家什么效用呢？&lt;/p&gt;
&lt;p&gt;我的解读是，这粒药丸的作用是让男主可以在每次需要的时候想起一生所学习、经历、阅读、思考过的所有内容，并在大脑内重新组织连接，于是当他写小说时可以旁微博引自己过去所有累积的资料，当他分析股市时可以统整过去所有的案例来做出更好的分析，简单来说，这粒药丸让男主：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把过去所有的积累，善用到每一个当下情境&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="alfred" scheme="http://seyvoue.com/tags/alfred/"/>
    
      <category term="evernote" scheme="http://seyvoue.com/tags/evernote/"/>
    
      <category term="omnifocus" scheme="http://seyvoue.com/tags/omnifocus/"/>
    
  </entry>
  
  <entry>
    <title>@给 Mac 优雅地一键装机</title>
    <link href="http://seyvoue.com/manual/a204ccfd.html"/>
    <id>http://seyvoue.com/manual/a204ccfd.html</id>
    <published>2018-12-28T07:13:29.000Z</published>
    <updated>2019-06-09T07:11:51.705Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 重装系统最简单的方式就是：日常通过 TimeMachine 对 mac 进行定期备份，在重装系统时，直接用它进行还原即可。但是，如果我们想要一个更加<strong>干净</strong>的新系统，不想在新 Mac 上直接迁移旧电脑的数据，但又不想手动下载安装以前经常使用的应用程序，不想对每个应用程序重新进行个性化配置，那么，此时通过 TimeMachine 还原的方式就不适用了。</p><p>本文将介绍通过<strong>脚本</strong>实现，将新的 mac 一键恢复到之前的状态。</p><p><strong>原理</strong><br>思考：首先明确我们希望 mac 恢复到什么样的状态？</p><ul><li>自动安装好以前常用的应用程序。不需要先回忆之前安装了哪些应用程序，然后一个一个的下载和安装</li><li>每个应用程序不需要再手动个性化配置，只需要使用以前的配置文件或者配置信息与用户绑定，登录用户后即可恢复到以前的配置</li><li>安装之前使用过的破解软件（建议如果经济允许，还是多支持正版）</li></ul><p>几个 mac 日常安装和使用应用程序的建议：</p><ul><li>对于 git、python等命令行软件统一使用 <code>homebrew</code> 下载安装</li><li>对于 chrome、qq、sublime 等 GUI 应用程序优先使用 <code>homebrew cask</code> 下载管理</li><li>对于 app store 中的应用程序可使用终端上的 <code>mas</code> 进行下载安装</li><li>如果经济允许，对于经常使用的软件，最好购买正版，不仅方便日常的升级更新，也省去了寻找破解安装包的时间，而且更安全</li><li>各软件的配置文件建议都保存在本地（如 google drive 中），这样便不会丢失配置信息，而且也方便重装软件时刻通过本地配置文件恢复到之前的使用习惯</li></ul><p>如果你坚持按照上面的建议管理 mac 上要安装的软件，那么，本文的方法便适合你。</p><h2 id="定期自动备份-macOS-软件列表"><a href="#定期自动备份-macOS-软件列表" class="headerlink" title="定期自动备份 macOS 软件列表"></a>定期自动备份 macOS 软件列表</h2><p>一般而言，macOS 中软件来源及其安装位置有以下几种：</p><ul><li>Mac App Store 安装，位置：<code>/Applications</code></li><li>手动下载安装，位置：<code>/Applications</code></li><li>Homebrew 安装，位置：<code>/usr/local/Cellar</code>，主要是一些命令行工具</li><li>Homebrew Cask 安装，位置：<code>/usr/local/Caskroom</code>，主要是各种普通软件，如 Alfred、Steam 等</li></ul><p>还有一些软件会安装在用户目录下Applications的文件夹中（<code>/Users/xx/Applications</code>），如 Steam 中下载的游戏。这些一般不需要备份。</p><p>这些七零八落的软件，手动备份列表是很麻烦的。而且，我们可能经常安装或删除一些软件，需要定期更新软件列表。所以，最好能够定期自动备份，并且是保存在云上，保证数据安全。而要保存在云上，macOS 自带的 iCloud 或者 google drive 都是比较好的选择。</p><p>自动备份软件类别的脚本如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 生成/Applications文件夹中的所有软件列表</span><br><span class="line">ls -lh /Applications &gt; $&#123;backupFolder_BASE&#125;/applist/All_AppList</span><br><span class="line"><span class="meta">#</span> 来自 Mac App Store 的 app 列表</span><br><span class="line">/usr/local/bin/mas list &gt; $&#123;backupFolder_BASE&#125;/applist/MAS_AppList </span><br><span class="line"><span class="meta">#</span> 生成 Homebrew 安装的命令行工具列表</span><br><span class="line">/usr/local/bin/brew list &gt; $&#123;backupFolder_BASE&#125;/applist/Brew_AppList </span><br><span class="line"><span class="meta">#</span> 生成 Homebrew Cask 安装的普通软件列表</span><br><span class="line">/usr/local/bin/brew cask list &gt; $&#123;backupFolder_BASE&#125;/applist/BrewCask_AppList</span><br></pre></td></tr></table></figure></p><h2 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h2><p>需要说明的是，第一行命令生成的所有软件列表，鱼龙混杂，需要你自己挑选并安装，而且如果你有使用破解软件的话，该列表中也会包含有破解软件，对于破解软件只能手动安装，所以建议手动维护一份破解软件列表。（所以，如果经济允许的话请支持正版）</p><p>后面几种可以自动安装。但是，在安装前，你应该检查列表文件，去除一些不再需要的 App，确保内容无误。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">applistFolder=/Users/xxx/autobackup/applist</span><br><span class="line">appInstallerFolder=/Users/xxx/reinstall-system</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装 Homebrew 和 MAS</span><br><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br><span class="line">brew install mas</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 生成 MAS_AppList 安装命令</span><br><span class="line">cat "$&#123;applistFolder&#125;/MAS_AppList" | sed "s/(.*)//g" | sed -Ee 's/([0-9]+) (.+)/mas install \1 #\2/g' &gt; $&#123;appInstallerFolder&#125;/AppInstaller</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 生成 Brew_AppList 安装命令</span><br><span class="line">echo "\nbrew install $(cat $&#123;applistFolder&#125;/Brew_AppList | tr '\n' ' ')" &gt;&gt; $&#123;appInstallerFolder&#125;/AppInstaller</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 生成 BrewCask_AppList 安装命令</span><br><span class="line">echo "\nbrew cask install $(cat $&#123;applistFolder&#125;/BrewCask_AppList | tr '\n' ' ')" &gt;&gt; $&#123;appInstallerFolder&#125;/AppInstaller</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 开始安装</span><br><span class="line">chmod u+x $&#123;appInstallerFolder&#125;/AppInstaller</span><br><span class="line"><span class="meta">$</span>&#123;appInstallerFolder&#125;/AppInstaller</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mac 重装系统最简单的方式就是：日常通过 TimeMachine 对 mac 进行定期备份，在重装系统时，直接用它进行还原即可。但是，如果我们想要一个更加&lt;strong&gt;干净&lt;/strong&gt;的新系统，不想在新 Mac 上直接迁移旧电脑的数据，但又不想手动下载安装以前经常
      
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="mac" scheme="http://seyvoue.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>@借助 Alfred 简化博客发布流程</title>
    <link href="http://seyvoue.com/manual/7845c42e.html"/>
    <id>http://seyvoue.com/manual/7845c42e.html</id>
    <published>2018-12-28T05:48:53.000Z</published>
    <updated>2019-06-09T07:11:51.696Z</updated>
    
    <content type="html"><![CDATA[<p>为了方便管理已经发布的博文，所以目前本地使用 Mweb 的外部模式对已有博文进行管理，所以整个博文发布流程变得有点繁琐，需要在终端与 Mweb 两个程序间进行不断的切换，而且每次发布过程都需要输入重复指令，如：<code>hexo new post &#39;title&#39;</code>, <code>hexo clean</code>, <code>hexo g -d</code>,<code>git add -A</code> <code>git commit -m &#39;message&#39;</code>等等。为了能够简化这个发布流程，选择采用 Alfred 的工作流来解决这个问题。</p><a id="more"></a><p>目前的发布流程:</p><div id="flowchart-0" class="flow-chart"></div><blockquote><p>为什么要在 Mweb 外部模式和文档库模式各保留一份<code>markdown</code>笔记？</p></blockquote><p><em>因为 Mweb 的外部模式，只是加载了本地目录中的文件，不具备对目录中的文件进行整理的功能（如分类、打标签等），而 Mweb 文档库模式更适合作为一个知识管理工具，所以我将所有笔记都统一使用 Mweb 文档库模式进行记录和管理，使用外部模式中管理要发布到博客的笔记。</em></p><p>可以看到整个发布流程有点繁琐，理想状态应该是：</p><div id="flowchart-1" class="flow-chart"></div><p>解决方案：Alfred+工作流将博文发布过程自动化<br>目前已经可以做到：</p><ul><li><code>nblog title</code>：打开 Mweb 外部模式，新增一条名为”titile”的hexo博文，同时在 Mweb Library 模式中新增一篇“title”的笔记</li><li><code>dblog</code>: 将新增博文发布到博客站点</li><li><code>sblog message</code>: 将变更同步更新的 github。<code>message</code> 为：新增的博文标题</li><li><code>cblog</code>：将最新的一篇博文内容复制到 Mweb Library 最新的一篇笔记中</li></ul><p>这个解决方案，基本简化了博文的发布和创建流程，但仍旧存在以下问题：</p><ul><li>关于博文内容复制功能<code>cblog</code>，可能会出现外部模式那篇博文复制到Library 模式的不同名笔记中</li><li>是否可将博文复制过程自动化<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">op1=>operation: 以 Mweb 文档库模式（快捷键 command+L），打开 Mwebop2=>operation: 新建一条名为 “title”的笔记Aop3=>operation: 打开 itermop4=>operation: cd 到博客博目录op5=>operation: 执行 hexo new post 'title'op6=>operation: 打开 Mweb 外部模式（command+e）op7=>operation: 找到名为“title”的博文B，将笔记A的内容复制到博文B中op8=>operation: 给博文B打上标签、分类等博文元数据op9=>operation: 打开 itermop10=>operation: 在博客根目录执行 hexo g -d 发布新的博文op1->op2->op3->op4->op5->op6->op7->op8->op9->op10</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">op1=>operation: 执行一条命令，便可在 Mweb 外部模式新增一条 hexo 博文，并打开 Mweb 外部模式，同时会在 Mweb Library 模式新增一篇同名笔记op2=>operation: 在 Mweb 外部模式中编辑博文op3=>operation: 执行一条命令，便可将将博文发布op4=>operation: 执行一条命令，便可将外部模式的那篇博文内容复制到 Mweb Library 模式的同名笔记中op1->op2->op3->op4</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了方便管理已经发布的博文，所以目前本地使用 Mweb 的外部模式对已有博文进行管理，所以整个博文发布流程变得有点繁琐，需要在终端与 Mweb 两个程序间进行不断的切换，而且每次发布过程都需要输入重复指令，如：&lt;code&gt;hexo new post &amp;#39;title&amp;#39;&lt;/code&gt;, &lt;code&gt;hexo clean&lt;/code&gt;, &lt;code&gt;hexo g -d&lt;/code&gt;,&lt;code&gt;git add -A&lt;/code&gt; &lt;code&gt;git commit -m &amp;#39;message&amp;#39;&lt;/code&gt;等等。为了能够简化这个发布流程，选择采用 Alfred 的工作流来解决这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="hexo" scheme="http://seyvoue.com/tags/hexo/"/>
    
      <category term="alfred" scheme="http://seyvoue.com/tags/alfred/"/>
    
  </entry>
  
  <entry>
    <title>@借助工具 OmniFocus+toggl 实践GTD</title>
    <link href="http://seyvoue.com/manual/b2c3d29f.html"/>
    <id>http://seyvoue.com/manual/b2c3d29f.html</id>
    <published>2018-12-26T02:43:47.000Z</published>
    <updated>2019-06-09T07:11:51.704Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GTD 即 Getting Things Done 的缩写，翻译过来就是“把事情做完”，是一个管理时间的方法。GTD 的核心理念概括就是必须记录下来要做的事，然后整理安排并使自己一一去执行。GTD的五个核心原则是：收集、整理、组织、回顾、执行。—— 百度百科</p></blockquote><a id="more"></a><p>对于我来说，GTD是一种工具，可以督促我按时完成计划，并辅助我更好的制定和管理计划。下图为我的GTD流程图：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/t2zix.png" alt=""></p><p>借助工具实践GTD：OmniFocus 作为任务管理、toggl 作为时间追踪。在执行 OmniFocus 中的某项动作时，使用 toggl 记录该动作的执行时间，这样做的好处是：</p><ul><li>方便日后回顾完成每项任务所需要的时间，提高对时间的敏感度，以更好的制定计划</li><li>可以利用 toggl 实施番茄工作法，提高专注度和效率</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GTD 即 Getting Things Done 的缩写，翻译过来就是“把事情做完”，是一个管理时间的方法。GTD 的核心理念概括就是必须记录下来要做的事，然后整理安排并使自己一一去执行。GTD的五个核心原则是：收集、整理、组织、回顾、执行。—— 百度百科&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="effectiveness" scheme="http://seyvoue.com/tags/effectiveness/"/>
    
      <category term="GTD" scheme="http://seyvoue.com/tags/GTD/"/>
    
  </entry>
  
  <entry>
    <title>@用 Omnifocus 搭建任务管理系统</title>
    <link href="http://seyvoue.com/manual/4d5e7556.html"/>
    <id>http://seyvoue.com/manual/4d5e7556.html</id>
    <published>2018-12-11T01:30:47.000Z</published>
    <updated>2019-06-09T07:11:51.712Z</updated>
    
    <content type="html"><![CDATA[<p>笔者是一个自控力极差的拖延症患者，尝试了各种方式和工具都没能很好的解决这个问题，直到看到<a href="https://sspai.com/post/49105" target="_blank" rel="noopener">此文</a>。</p><p>根据<a href="https://sspai.com/post/49105" target="_blank" rel="noopener">该文</a>的思路，可以解决笔者目前在执行计划时常碰到的几个问题：</p><ul><li>OmniFocus + 番茄工作法，辅助自己更好的量化任务（目标）、完成任务</li><li>使每一个被丢进todolist 的任务都会被很好的执行。而不像之前：有些任务丢进去后由于没有回顾就忘记了，事后再看见该任务的时候，已经不想做了；有些任务制定的不够清晰，到执行的时候感觉有难度，然后拖着拖着就不做了。</li></ul><a id="more"></a><h2 id="什么是一个好的任务管理系统"><a href="#什么是一个好的任务管理系统" class="headerlink" title="什么是一个好的任务管理系统"></a>什么是一个好的任务管理系统</h2><p>首先，任务管理系统的目的是为了更好得完成任务，一切脱离这个基本条件的系统都是不可用的。如果你觉得一个最简单的 Todo List 就能很好地完成任务，那么这就是最适合你的任务管理系统。</p><p>在我看来，一个优秀的任务管理系统至少需要满足以下条件：</p><ul><li>收集能力</li><li>在特定的情况下知道可以做哪些事情</li></ul><blockquote><p>为什么需要至少满足这两个条件呢，或者说这两个条件对于任务管理系统来说，重要在哪里？</p></blockquote><p><strong>收集能力</strong>指的是这个任务系统要能够容纳（几乎）所有的内容，一个任务、一条想法、一封未读的邮件、一个笔记、一个链接、没有报销的发票等等。</p><p>如果有读过《Getting Things Done》或者了解过 GTD 理论的同学可能就知道，<strong>收集</strong> 是整个流程中最开始的一环。如果要做的任务散乱在各处，难免会有遗忘的时候，任务没有被收集到，也就没有后面的处理流程了。</p><p>具体实践起来并不是真的需要把所有的东西都塞进任务系统里面，例如我使用 Evernote 作为剪裁和笔记的工具，很显然把每条笔记都复制一份到 OmniFocus 中很不现实，但是我会在 OmniFocus 中添加一个「定期清理 Evernote Inbox」的任务，这样就相当于把 Evernote 作为 OmniFocus 的子 Inbox，来统一进行管理。对于一些支持 URL Schema 的应用，完全可以在 OmniFocus 中建立一个链接直接指定，这样在 OmniFocus 中也可以直接打开其他应用中的内容了。</p><p><strong>收集能力决定了要处理的内容，第二个条件则决定了一个任务系统是否是稳定可用的。</strong>具体的情境来说，你要知道早上的时候该干哪些事，工作的时候该干哪些事，无聊的时候又该干哪些事等。这样，在某一情境下，可以直接进入状态，而不是要花时间思考现在到底要做什么。</p><p>一个任务系统如果做好了这两件事情，那么就不会让你身处「感觉有很多事情要做，却不知道要做什么」的尴尬境地了。</p><h2 id="任务管理系统的三要素"><a href="#任务管理系统的三要素" class="headerlink" title="任务管理系统的三要素"></a>任务管理系统的三要素</h2><p>到现在为止，我还没有讲到具体工具的使用。因为工具是次要的，了解了本质的思想，使用什么工具都没有问题。纵观各种任务管理的工具：OmniFocus、Todoist、Things、org-mode，它们支持的功能也各不相同，Project、无限层级、Defer、Due、Repeat、Context、Label、Tag、Filter、Perspective 等等，有没有被这些名词给吓到？难道我们每切换一种系统都需要再重新学习一遍？</p><p>抛开这些名词，我们来分析一下一个任务系统到底是由什么组成的。在我看来，一个任务系统最本质的东西只有三个：任务、附加元素和过滤器。</p><p><strong>任务</strong>：一个 <em>最小可执行</em> 的单元即为一个任务。这个是最好理解的，所以不做过多解释。</p><p><strong>附加元素</strong>：作用在任务上的不同维度的限制。这句话读起来有点拗口，举个简单例子，「去 XXX 取快递（截止今天 10:00）」，其中，「截止今天 10:00」就是在时间维度上对这个任务的一个限制。同样的，「项目」、「标签」等等这些都是作用在某个任务上的附加元素。</p><p><strong>过滤器</strong>：组合不同附加元素的过滤规则。只有附加元素并没有什么实际的作用，但是有了过滤器之后，就可以编写不同的过滤规则来过滤指定规则的任务。例如，我想知道「最近 10 天内重要的事情」，那么过滤规则可能就是「Due date &lt; 10 and flagged」。</p><p>了解了上面三个基本的概念，那么再重新审视各种任务管理工具，就可以从一个比较宏观的角度来看待了，这也可以避免切换工具造成的重新学习成本。</p><p>这三个概念和 Hum 在《用更现代的方式做任务管理》提出的「LTF（列表、标签、过滤）」理论十分类似，并且 Hum 用了更大的篇幅来叙事这个概念，有兴趣的可以订阅这个栏目阅读。</p><h2 id="OmniFocus-3-实践"><a href="#OmniFocus-3-实践" class="headerlink" title="OmniFocus 3 实践"></a>OmniFocus 3 实践</h2><p>把上面任务系统的基本三要素运用到 OmniFocus 上，任务就是一个个的单独 Todo item，附加元素就是 Todo item 所属的项目、Due Date、Defer Date、Tags、Flag、Repeat rule 等，过滤器就是透视（Perspective）。</p><p>接下来的内容我会通过 OmniFocus 3 为载体，来具体介绍如何实现一个可靠的任务管理系统，并介绍一些实际实践过的 Workflow 流程。</p><h3 id="项目的设定"><a href="#项目的设定" class="headerlink" title="项目的设定"></a>项目的设定</h3><p>如果想保证项目比较有序，分成三个层级即可：<code>大的领域（Folder）- 子领域（Folder）- 项目（Project）</code>。</p><p>例如，我的项目分级如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/9pw3g.png" alt="OmniFocus 项目分类">           </p><p>主要分成了5个比较大的项目：系统、学习、工作、生活、兴趣，基本上可以涵盖涉及到所有的领域了。在每个大的项目中再细分出小的项目，这个可以根据自己的需要进行积分。OmniFocus 支持无限极的项目划分，但是个人建议不要超过3层，最后一层直接是任务就可以了，这样可以保证项目层级不会过于复杂。</p><p>可以看到很多项目下面都有用<code>[]</code>括起来的项目，这个是 Single List 项目，这样一些不属于某个项目里面的内容就可以放到这个列表里了。</p><p>一些项目设定的 Tips：</p><ul><li>如果不是 Single List，项目需要一个既定的完成条件，在某一时刻或某一条件下，这个项目是要能够被标记为 Completed 或者 Dropped，这样可以避免一个项目长时间地呆在任务系统中；</li><li>项目中的任务最好是最小可执行的，如果是比较大的任务，可以利用 OmniFocus 的无限任务层级继续细分。</li></ul><h3 id="标签的设定"><a href="#标签的设定" class="headerlink" title="标签的设定"></a>标签的设定</h3><p>例如，我的标签如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/3bylf.png" alt="OmniFocus 标签策略"></p><p>一个任务在时间维度上应该有有截止日期（Due）和安排日期（Schedule）两个元素，Due 表示在某一天之前必须被完成，Schedule 表示被安排到某一天做，所以可以设定如下标签来完成 Schedule 的功能：</p><ul><li>Schedule：<ul><li>Today：被安排到今天</li><li>Recently：最近需要做的事</li><li>ThisWeek：被安排到这周</li><li>ThisMonth：被安排到这个月</li><li>ThisYear：被安排着这年</li></ul></li></ul><p>这样在做计划的时候，打上对应的标签，就可以使用过滤器过滤出对应的任务了，比如我想看「这个月和工作相关的任务」，那么就可以指定 Project 为「Work」项目，标签为「ThisMonth」，这样对应的任务就可以使用这个过滤器过滤出来，具体的过滤器设定下面会讲到。若一项任务没有被打上 Schedule 标签，则该任务不该被认为为一项可执行的任务，因为一项未被安排的任务在未来很有可能会被你忽略，所以，对于要添加进 OmniFocus 的任务，一定要打上 Schedule 标签，否则就不要添加进去。</p><p>另外一个可以借鉴的设定就是精力值标签：</p><ul><li>Energy<ul><li>LowEnergy</li><li>MediumEnergy</li><li>HighFocus</li></ul></li></ul><p>例如，我们工作了一整天之后，还剩一段时间才下班，精力已经下降到一个很低的值，这个时候已经不适合完成一些需要非常专注的工作了，但是一些工作上的杂事，例如打印东西，提交报表等简单的工作可以利用这个时间来完成，这个时候我们就可以设定一个过滤器，过滤出 Project 为「Work」，标签为「LowEnergy」的任务。</p><p>我们可以看到，标签系统可以极大地扩展附加元素的内容，给过滤器添加更多的过滤维度。标签系统的设定应该根据自己的需求来，<strong>如果设定的标签却没有在过滤器中用到的话，那么也仅仅是个任务添加了一个没有用上的附加元素而已，意义不大。</strong></p><h3 id="过滤器设定"><a href="#过滤器设定" class="headerlink" title="过滤器设定"></a>过滤器设定</h3><p>例如，我的过滤器如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/oqczw.png" alt="OmniFocus 过滤器策略"></p><p>过滤器的目的就是组合各种条件，过滤出所需要的任务来，之前所有的任务上的附加元素都是为了过滤器而设定的。</p><p>同标签系统一样，过滤器的设定依然需要结合自己的情况来。我主要设定了以下几个过滤器，这些过滤器都是在实践中经常使用到的。</p><h4 id="Routine-过滤器"><a href="#Routine-过滤器" class="headerlink" title="Routine 过滤器"></a>Routine 过滤器</h4><p>这个过滤器主要被用于制定计划。例如：由于我每天晚上睡得比较晚，所以我创建了一个 Evening Review，来规划明天需要做的任务。</p><p>过滤器的详细设定如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/icpnx.png" alt="Routine 过滤器设置"></p><p>其中，「Routines」Folder 中就是设定的具体内容：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/a38sl.png" alt="Routines 文件夹中的内容">   </p><p>这一个过滤器的设定是和我的 Workflow 紧密相连的，如果你没有做 Morning Review 之类的习惯，可以不需要设定这个过滤器。</p><h4 id="Today-过滤器"><a href="#Today-过滤器" class="headerlink" title="Today 过滤器"></a>Today 过滤器</h4><p>这个过滤器被使用的次数最多，过滤器的详细设定如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/fkfs6.png" alt="Today 过滤器设置"></p><p>这个过滤器将会把符合以下条件的任务过滤出来：</p><ul><li>即将截止或者标注为 Today 标签的任务</li><li>状态为 Available 的任务</li><li>非 Routine Folder 下的任务</li></ul><p>显示方式以 Project 为维度显示：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/ds81c.png" alt=""></p><p>对比 Forecast Perspective，它只是把对应的任务都展示了出来，在任务的层级上没有自定义的那么清晰。<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/oado8.jpg" alt=""></p><h4 id="Work-过滤器"><a href="#Work-过滤器" class="headerlink" title="Work 过滤器"></a>Work 过滤器</h4><p>这个过滤器和 Today 类似，只不过指定了所属项目为「Work」文件夹下面的任务，这个主要是在工作中只想专注于和工作相关的任务。</p><p>过滤器的详细设定如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/wpikt.jpg" alt=""></p><p>除了指定了特殊的项目目录，其他的设置和 Today 的设定没有区别。</p><h4 id="To-Sth-过滤器"><a href="#To-Sth-过滤器" class="headerlink" title="To-Sth 过滤器"></a>To-Sth 过滤器</h4><p>日常的使用中，我会把没有看的文章、需要写的东西、要读的书、要搜索的内容都存在 OmniFocus 中，所以需要一个过滤器能够快速过滤出这些内容。</p><p>首先使用这个过滤器需要先设置一套标签系统：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/ndsdd.jpg" alt=""></p><p>过滤器的详细设定如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/8da6i.jpg" alt=""></p><p>实际的使用场景：比如我想阅读一些和 Python（一门编程语言）相关的内容，那么我只需要打开这个 Perspective，挑选标签为 <code>To-Read</code>，然后从搜索框中搜索 Python 关键字就可以了。</p><h4 id="Future-过滤器"><a href="#Future-过滤器" class="headerlink" title="Future 过滤器"></a>Future 过滤器</h4><p>这个过滤器主要被用于制定计划，在 Weekly Review 和 Daily Review 中会被频繁地使用到。需要基于以下的标签设定：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/w1efh.jpg" alt=""></p><p>过滤器的详细设定如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/5jh9f.jpg" alt=""></p><h4 id="EasyDo-过滤器"><a href="#EasyDo-过滤器" class="headerlink" title="EasyDo 过滤器"></a>EasyDo 过滤器</h4><p>这个过滤器会把一些简单的或者不需要太多精力的任务过滤出来。</p><p>过滤器的详细设定如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/evkqk.jpg" alt=""></p><p>完成时间小于 15 分钟或者被标注为<code>LowEnergy</code>标签的任务会被过滤出来。</p><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>在整个 Workflow 中，主要分为三个部分：计划、执行、总结。</p><p>当按照上述思路完成以 OmniFocus 对任务管理系统的搭建后：</p><ul><li>每天我必须要完成的具体任务全部都在 <code>Today</code> 过滤器中</li><li>只需要根据<code>Routine</code>的提示，便可得到日计划、周计划、月计划</li><li>当无聊或想利用碎片时间完成一些简单的事情时，只需要去 <code>EasyDo</code>过滤器中去领取就可以了</li><li>阅读清单、购物清单等等只需要去<code>To-Sth</code>过滤器中找就可以了</li><li>并且可以从<code>Future</code>过滤器中知道日周月计划</li></ul><h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><p>很多人都不重视计划这个环节，想到什么做什么，这样不仅会做事没有条理，也会分不清任务的优先级。</p><p>一般来说，如果不知道怎么做计划的话，有一个长期计划和一个短期计划就可以了。长期计划主要是一个大体的方向，可以是年度计划或者月度计划；短期计划则需要明确具体要做哪些事情，可以是周计划或者日计划。</p><p>实践过程中使用最多的就是周计划和日计划，以及月计划和年计划。在 OmniFocus 中，我设定了几个项目，分别是  <code>Morning Review</code>、<code>Evening Review</code>、<code>Weekly Review</code>、<code>Monthly Review</code>、<code>Annual Review</code>。</p><ul><li>Evening Review</li></ul><blockquote><p>由于我晚上睡得比较晚，所以我会在每天晚上通过 <code>Future</code>过滤器，从<code>ThisWeek</code> 和 <code>Recently</code>标签中的任务挑出一些作为明天的任务，并将它们打上<code>Today</code>标签。</p></blockquote><ul><li>Morning Review</li></ul><blockquote><p>通过<code>Today</code>过滤器，知悉今天要完成的任务</p></blockquote><ul><li>Weekly Review</li></ul><blockquote><p>通过 <code>Future</code>过滤器，从<code>ThisMonth</code>标签中挑选出本周的任务，并将它们打上<code>ThisWeek</code>标签</p></blockquote><ul><li>Monthly Review</li></ul><blockquote><p>通过 <code>Future</code>过滤器，从<code>ThisYear</code>标签中挑选出本月的任务，并将它们打上<code>ThisMonth</code>标签</p></blockquote><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>执行应该是整个 Workflow 中最重要的一个环节，如果只是计划了，但是最后任务却没有被完成，那做计划也只是白费力气。</p><p>执行的关键就是要在对的时间内做对的事，这也是为什么要设置那么多过滤器的原因，在工作的时候就只展示工作相关要做的事，在没有精力的时候就只展示简单易做的事情。</p><p>如果你做事情的时候很容易分心，可以参考一下番茄工作法，一般我会设置为专注 50 分钟，然后休息 10 分钟。默认的 25 分钟时间过短，可能刚进入状态就要被打断。</p><p>另外可以尝试使用「结构化拖延法」（Structured Procrastination）。结构化拖延法就是忽略优先级高的事，而是从小的事，优先级比较低的事情开始做，这样慢慢地进入工作的状态，然后再去完成优先级高的事情。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>OmniFocus 3 提供了自带的 Review 透视，建立每个项目的时候可以选择多少天 Review 一次。实践上，一般工作上需要每天跟进的项目，会把 Review 的时间设置为每天一次，一般的项目设置为一周 Review 一次即可。为了防止忘记 Review，可以把这个 Review 的任务添加到 Morning Review 或者 Weekly Review 中。</p><h2 id="常用的脚本"><a href="#常用的脚本" class="headerlink" title="常用的脚本"></a>常用的脚本</h2><p>脚本的安装方法：<br>step1: 将后缀为<code>scpt</code>的脚本文件拷贝到 OmniFocus 的脚本目录 (可以使用 OmniFocus 的 <code>Help-&gt;Open Scripts Folder</code> 直接打开);<br>step2: OmniFocus 工具栏上右键, 在弹出的菜单上选择<code>Customize Toolbar…</code>, 找到新增脚本对应的 icon 拖到工具栏上即可。</p><h3 id="任务执行时间统计脚本"><a href="#任务执行时间统计脚本" class="headerlink" title="任务执行时间统计脚本"></a>任务执行时间统计脚本</h3><p>如果能够直接在OmniFocus中记录任务的执行时间, 并统计出任务和项目的执行时间就更好了, 所以有了本文所描述的工作。<br>共三个AppleScript脚本文件: <code>start.scpt</code>, <code>stop.scpt</code>和<code>report.scpt</code>.（<a href="https://github.com/jeffzhangfly/of-timetracking-script" target="_blank" rel="noopener">下载地址</a>）</p><ul><li>start.scpt</li></ul><p>开始一个任务, 此脚本将在该任务的标题前添加<code>#Ongoing:</code>, 表示该任务正在进行, 并在该任务的备注 (note) 属性尾部增加一个记录时间的字符串(或修改这个记录时间的字符串, 如果该任务之前已经开始执行过).</p><p>如果开始任务时该任务的 Defer Until 没有填写, 那么将其设置为当前时间, 作为报告中的任务开始时间.</p><ul><li>stop.scpt</li></ul><p>停止一个任务, 该脚本可以停止已经开始的任务 (标题前有”#Ongoing:” 文本的任务, 停止后删除任务标题中的”#Ongoing”文本), 并根据该任务备注 (note) 属性中的时间记录字符串计算该任务已执行时间.</p><blockquote><p>注意: 任务的执行可以分为多次启动/停止, 一个任务的总执行时间是多次执行时间之和.</p></blockquote><ul><li>report.scpt</li></ul><p>该脚本统计已完成的任务及其执行时间, 并累加各个项目中所有任务的执行时间作为项目执行时间.<br>对原脚本 (OmniFocus&gt; Prepare Task Completion Report Version 2.0.0) 所做的修改如下:</p><ul><li>增加一个属性用于设置保存报告的 Evernote 笔记本名称;</li><li>统计范围中增加 Year, 并设置 Today 为默认统计范围;</li><li>根据 start 和 stop 脚本记录在备注 (note) 中的时间字符串, 在报告中为任务增加执行时间数据;</li><li>统计项目执行时间, 其值为项目下的所有任务执行时间之和;</li><li>将报告的标题改为统计的日期范围;</li><li>如果某项没有设定值, 报告中将不显示该项数据;</li></ul><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p><strong>启动任务</strong></p><ul><li>选中一个任务后, 点击工具栏的<code>start</code> 脚本图标.</li><li>任务启动后, 会弹出任务开始执行通知.</li><li>点击<code>start</code>脚本后, 任务标题前将添加<code>#Ongoing:</code>字符串, 并且任务备注 (note) 尾部将添加时间字符串.</li></ul><p><strong>停止任务</strong></p><ul><li>在任务执行一段时间需要停止时, 例如被打断或暂时休息或完成了该任务, 点击工具栏的”stop”脚本图标. 停止后的任务会记录本次任务执行的时间, 可以在备注 (note) 尾部时间字符串中看到变化.</li><li>任务停止后, 会弹出任务停止执行通知.</li></ul><p><strong>生成报告</strong></p><ul><li>任何时候点击<code>report</code>脚本图标, 将会首先弹出报告时间范围选择窗口, 如下图所示.</li><li>选择一个时间范围后, 点击”OK” 按钮, 将会生成统计报告并在 Evernote 的<code>Omnifocus_reports</code> 笔记本中创建一个统计报告, 如下图. 笔记本名称<code>Omnifocus_reports</code> 可以在脚本中修改.</li><li>报告中, 每个任务如果使用了<code>start</code> 和<code>stop</code> 脚本记录任务执行时间, 将会显示执行时间, 并会统计一个项目的总执行时间, 如上图中下方的蓝色文本.</li></ul><p><strong>注意事项</strong></p><ul><li>使用<code>start</code>和<code>stop</code>脚本记录任务执行时间后, 将会在该任务的备注 (note) 的尾部添加时间字符串, 不要删除它或手动修改它, 并且一定不要将备注文本放在时间字符串之后, 否则会影响执行时间的统计. 统计报告中的备注文本会自动忽略掉时间字符串;</li><li>任务开始后会在任务标题头部增加一个标记字符串<code>#Ongoing:</code>, 任务停止后自动删除, 不要手动修改它.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔者是一个自控力极差的拖延症患者，尝试了各种方式和工具都没能很好的解决这个问题，直到看到&lt;a href=&quot;https://sspai.com/post/49105&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;此文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;根据&lt;a href=&quot;https://sspai.com/post/49105&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;该文&lt;/a&gt;的思路，可以解决笔者目前在执行计划时常碰到的几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OmniFocus + 番茄工作法，辅助自己更好的量化任务（目标）、完成任务&lt;/li&gt;
&lt;li&gt;使每一个被丢进todolist 的任务都会被很好的执行。而不像之前：有些任务丢进去后由于没有回顾就忘记了，事后再看见该任务的时候，已经不想做了；有些任务制定的不够清晰，到执行的时候感觉有难度，然后拖着拖着就不做了。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="effectiveness" scheme="http://seyvoue.com/tags/effectiveness/"/>
    
      <category term="GTD" scheme="http://seyvoue.com/tags/GTD/"/>
    
  </entry>
  
  <entry>
    <title>@Mac 终端配置策略：iterm2+oh-my-zsh+powerlevel9k</title>
    <link href="http://seyvoue.com/manual/e5c8b56.html"/>
    <id>http://seyvoue.com/manual/e5c8b56.html</id>
    <published>2018-12-04T07:29:53.000Z</published>
    <updated>2019-06-09T07:11:51.700Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文适用于 mac 用户<br>原则：避免扰乱你的开发环境，尽可能使用 <code>homebrew</code> 来安装需要的包套件</p></blockquote><p>配置完后的效果如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt=""></p><a id="more"></a><h2 id="安装-iterm2"><a href="#安装-iterm2" class="headerlink" title="安装 iterm2"></a>安装 iterm2</h2><p>step1: 使用 homebrew 安装 iterm2<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 若是第一次执行 brew cask 的话，需要先执行</span><br><span class="line">brew tap caskroom/cask</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安裝 iTerm2</span><br><span class="line">brew cask instal iterm2</span><br></pre></td></tr></table></figure></p><p>step2：修改 Report Terminal Type，以支持绚丽的配色<br>安装 iterm2 后，修改 <code>Report Terminal Type</code>为 <code>xterm-256color</code>：<br>依次<code>Preferences &gt; Profiles &gt; Terminal &gt; Report Terminal Type</code>，设为<code>xterm-256color</code></p><p><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-report%20terminal%20type.png" alt=""></p><h2 id="修改-iterm2-的配色方案"><a href="#修改-iterm2-的配色方案" class="headerlink" title="修改 iterm2 的配色方案"></a>修改 iterm2 的配色方案</h2><p>设定路径：<code>Preferences &gt; Profiles &gt; Colors &gt; Color Presets...</code><br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-presets.png" alt=""></p><p>内建的 color scheme 不是很好看，可以去<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">iTerm2 Color Schemes</a>克隆到本地，然后 import 到 iterm2 中<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-import-presets.png" alt=""></p><p>刚才克隆下来的 iTerm2-Color-Schemes 有很多文件夹，从 <code>schemes</code> 資料夾裡面選一個喜歡的 color scheme，这里我选择的是 <strong><code>Tomorrow Night Eighties</code></strong><br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-tomorrow%20night%20eighties.png" alt=""></p><h2 id="安装-powerline-font"><a href="#安装-powerline-font" class="headerlink" title="安装 powerline font"></a>安装 powerline font</h2><p>由于我们要使用的 theme 会用到很多特殊的 icon，所以 iTerm2 选用的字体必须为支持这些特殊 icon 的字体。这类型的字体统称为 powerline font（另外还有加强版支持更多特殊 icon 的为 nerd font）</p><p>若沒有安装 powerline font 的话，遇到字体所不支持的 icon 时会像这样：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-non%20powerline%20font.png" alt=""></p><p>安装了 powerline font 后：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-1-0lPAd28LbancmQuHgnDyNg.png" alt=""></p><p>支持 powerline 的字体很多，这里选用的是 <code>Sauce Code Pro Nerd Font Complete</code></p><p>step1：使用 homebrew 安装字体<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 先執行這行，才能用 homebrew 安裝字型。曾經執行過的人可以跳過這個指令</span><br><span class="line">brew tap caskroom/fonts</span><br><span class="line"><span class="meta">#</span> 安裝指令</span><br><span class="line">brew cask install font-sourcecodepro-nerd-font</span><br></pre></td></tr></table></figure></p><p>如果想要安装別的字体，brew 上面也有很多字型可以挑，关键词是 <code>nerd</code>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search nerd</span><br></pre></td></tr></table></figure></p><p><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-075240.png" alt=""></p><p>step2：修改字体<br>装完后，依次<code>Preferences &gt; Profiles &gt; Text &gt; Change Font</code>，将字体改成<code>SauceCodePro Nerd Font</code>或你自己下载的字体：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-1-Br7NPgYzmLiLsalMiOXC5A.png" alt=""></p><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p>若在切换字体后，发生 iTerm2 无法正常运作，有可能是遇到同一字体有重复版本的问题，请按一下步骤进行修改：<br>打开 Font Book.app -&gt; 选择刚安装的字体 -&gt; 选择自动解决版本问题</p><h2 id="设定默认-shell-为-zsh"><a href="#设定默认-shell-为-zsh" class="headerlink" title="设定默认 shell 为 zsh"></a>设定默认 shell 为 zsh</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看支持的 shell</span><br><span class="line">cat /etc/shells</span><br><span class="line"># 若没有 zsh，则安装</span><br><span class="line">brew install zsh</span><br><span class="line"># 将 zsh 设定为默认的 shell</span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h2 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h2><p>上一步装完 zsh 后，就可以开始调整我们想要的 command line 外观设定了，但是原始的 zsh 因为设定太难搞，所以多年前刚出现的时候没有受到太多关注，直到有人写了一套叫 <code>oh-my-zsh</code> 的 framework 来帮助大家使用 zsh，zsh 才火了起来。现在几乎所有 zsh 好用的工具都有支援 <code>oh-my-zsh</code>，所以当然是要装这东西。</p><p>step1：安装 oh-my-zsh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p>注：这会直接执行 <code>oh-my-zsh</code> 的 <code>install.sh</code> 有疑虑的人可以先稍微研究一下 <code>oh-my-zsh</code> <code>github</code> 上的 <code>install.sh</code>，觉得放心再执行</p></blockquote><p>执行完以后如果没有出现什么错误讯息就代表成功了，同时会发现多了 <code>oh-my-zsh</code> 的文件夹 <code>~/.oh-my-zsh</code></p><h2 id="安装-powerlevel9k-主题"><a href="#安装-powerlevel9k-主题" class="headerlink" title="安装 powerlevel9k 主题"></a>安装 powerlevel9k 主题</h2><p>刚装完 <code>oh-my-zsh</code> 以后，预设是使用内建的 theme <code>robbyrussell</code>，多了 git 资讯，颜色也看起来比原生 bash 好一些：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-1-1TqBIUz998aoEAoepG4mbw.png" alt=""></p><p>不过 <code>oh-my-zsh</code> 内建很多 <code>theme</code>，在它的 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">github wiki</a> 上有很多截图可以参考：</p><p>切换内建的 theme 很简单，直接修改你的 <code>~/.zshrc</code>，把原本 <code>ZSH_THEME=”robbyrussell”</code> 改成你想要的：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 編輯 ~/.zshrc</span><br><span class="line">ZSH_THEME=”agnoster” # 試試看把 robbyrussell 改成 agnoster</span><br></pre></td></tr></table></figure></p><p>任何的 zsh 设定修改完后，还要执行以下命令才可以生效：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec $SHELL</span><br></pre></td></tr></table></figure></p><p><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-1-Dj2trYBv3hgFg4LOIlMtWg.png" alt=""></p><blockquote><p><code>agnoster</code> 看起来比 <code>robbyrussel</code> 漂亮多了。</p></blockquote><p>本文推荐 <code>powerlevel9k</code> 主题！<br>文章开头的图片就来自 <a href="https://github.com/bhilburn/powerlevel9k" target="_blank" rel="noopener">powerlevel9k 的 github</a><br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-1-OwwhfTqbc8IUaZnCAYXt7g.gif" alt=""></p><p><code>powerlevel9k</code> 不只是像上面的示范图显示一些基本的资讯，还可以，比如像下图那样，显示 WiFi 信号强度、笔记本剩余电量、CPU loading、system free memory 等等信息在 command line<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-1-Ixhmm4KVixyzZolr-OTV3w.png" alt=""></p><p>step1：克隆<a href="https://github.com/bhilburn/powerlevel9k" target="_blank" rel="noopener">powerlevel9k</a>到<code>~/.oh-my-zsh/custom/themes/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure><p>step2：編輯<code>~/.zshrc</code> ，把 <code>ZSH_THEME</code> 设为 <code>powerlevel9k</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># nerd-font active</span><br><span class="line">POWERLEVEL9K_MODE=&apos;nerdfont-complete&apos;</span><br><span class="line">ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</span><br></pre></td></tr></table></figure></p><p><strong>Note：</strong>必须在<code>ZSH_THEME</code>前增加 <code>POWERLEVEL9K_MODE</code>，否则可能会出现部分 icon 无法显示。</p><p>step3：调整 command line 的提示符以及显示样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 提示符修改</span><br><span class="line"># command line 左侧要显示的信息</span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir dir_writable rbenv vcs)</span><br><span class="line"># command line 右侧要显示的信息</span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs ram load history time)</span><br><span class="line"># 提示符分两行显示</span><br><span class="line">POWERLEVEL9K_PROMPT_ON_NEWLINE=true</span><br><span class="line"># 在提示符与要输入的指令之间增加空格</span><br><span class="line">POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=&quot;%f&quot;</span><br><span class="line"># 当前用户为 root 时，提示符为&quot;#&quot;，否则为&quot;$&quot;</span><br><span class="line">local user_symbol=&quot;$&quot;</span><br><span class="line">if [[ $(print -P &quot;%#&quot;) =~ &quot;#&quot; ]]; then</span><br><span class="line">    user_symbol = &quot;#&quot;</span><br><span class="line">fi</span><br><span class="line">POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=&quot;%&#123;%B%F&#123;black&#125;%K&#123;yellow&#125;%&#125; $user_symbol%&#123;%b%f%k%F&#123;yellow&#125;%&#125; %&#123;%f%&#125;&quot;</span><br><span class="line"># 没执行完一条指令在最后增加一空行</span><br><span class="line">POWERLEVEL9K_PROMPT_ADD_NEWLINE=true</span><br></pre></td></tr></table></figure></p><p>最终的效果如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-072643.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文适用于 mac 用户&lt;br&gt;原则：避免扰乱你的开发环境，尽可能使用 &lt;code&gt;homebrew&lt;/code&gt; 来安装需要的包套件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;配置完后的效果如下：&lt;br&gt;&lt;img src=&quot;http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-12-04-%E6%95%88%E6%9E%9C%E5%9B%BE.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="shell" scheme="http://seyvoue.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>@手把手教你如何搭建个人博客（五）</title>
    <link href="http://seyvoue.com/manual/85fb1e68.html"/>
    <id>http://seyvoue.com/manual/85fb1e68.html</id>
    <published>2018-11-26T01:39:43.000Z</published>
    <updated>2019-06-09T07:11:51.711Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍 Hexo 博客的SEO优化方法，让你的博客被 google 和 baidu 收录，并提高博文在搜索引擎的排名。</p><a id="more"></a><h2 id="查看你的博客是否被搜索引擎收录"><a href="#查看你的博客是否被搜索引擎收录" class="headerlink" title="查看你的博客是否被搜索引擎收录"></a>查看你的博客是否被搜索引擎收录</h2><p>在谷歌或者百度的搜索链接中，使用以下格式搜索自己的域名，如果能搜索到就说明已经被收录，反之则没有。可以直接搜索自己的域名，或者加一些关键词来更好地判断，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:seyvoue.com</span><br></pre></td></tr></table></figure></p><h2 id="提交网站到搜索引擎"><a href="#提交网站到搜索引擎" class="headerlink" title="提交网站到搜索引擎"></a>提交网站到搜索引擎</h2><p>若未被搜索引擎收录，则需进行以下配置，首先要让搜索引擎先验证我们对网站的所有权。两个搜索引擎提交的入口分别为：</p><p><a href="https://search.google.com/search-console" target="_blank" rel="noopener">Google Search Console</a></p><p><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-23-035833.png" alt=""></p><p><a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长平台</a><br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-24-034207.png" alt=""></p><p>有多重验证方式，这里选择<code>html meta</code>方式，将给出的元标记复制到<code>blog/themes/next/layout/_partials/head/head.swig</code>文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=&quot;UTF-8&quot;/&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=2&quot;/&gt;</span><br><span class="line">&lt;meta name=&quot;theme-color&quot; content=&quot;&#123;&#123; theme.android_chrome_color &#125;&#125;&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;baidu-site-verification&quot; content=&quot;qTlbubWUyw&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;google-site-verification&quot; content=&quot;Y9hBxOOKK4YNywVJN3FRwq2Xbry6ouA_XdM14MMdATU&quot; /&gt;</span><br></pre></td></tr></table></figure><p>添加后运行<code>hexo clean; hexo g; hexo d</code>将改动提交。稍后就可以验证成功了。</p><h2 id="给博客添加-sitemap"><a href="#给博客添加-sitemap" class="headerlink" title="给博客添加 sitemap"></a>给博客添加 sitemap</h2><p>这一步的目的在于告诉搜索引擎你的站点结构。</p><p>step1：安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-generator-sitemap --save</span><br><span class="line"><span class="meta">$</span> npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>step2：在Hexo 配置文件<code>blog/_config.yml</code>中添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hexo sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span> </span><br><span class="line"><span class="attr">    path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure><p>step3：执行 <code>hexo g</code> 生成 <code>sitemap.xml</code> 和 <code>baidusitemap.xml</code></p><p>执行完后，将会在<code>blog/public</code>目录下生成 <code>sitemap.xml</code> 和 <code>baidusitemap.xml</code></p><h2 id="提交-sitemap-到搜索引擎"><a href="#提交-sitemap-到搜索引擎" class="headerlink" title="提交 sitemap 到搜索引擎"></a>提交 sitemap 到搜索引擎</h2><p>分别到谷歌和百度的站长工具网站上提交sitemap就可以了。<br>如果不主动提交sitemap，搜索引擎可能无法自己找到sitemap，即使找到，速度也会很慢。</p><ul><li><p>在 <code>google search console</code> 输入 <code>sitemap.xml</code><br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-23-042035.png" alt=""></p></li><li><p>在 <code>百度站长平台</code> 输入 <code>seyvoue.com/baidusitemap.xml</code><br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-24-143643.png" alt=""></p></li></ul><p><strong>Note:</strong>对于百度提交链接，建议使用 <code>主动提交链接+sitemap</code> 的方式，具体见下文介绍。</p><h2 id="添加-robots-txt-文件"><a href="#添加-robots-txt-文件" class="headerlink" title="添加 robots.txt 文件"></a>添加 robots.txt 文件</h2><p>在<code>blog/source/</code>下新建<code>robots.txt</code>，告诉搜索引擎，哪些是可以爬的，哪些是不可以爬的，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#hexo robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /tags/</span><br><span class="line">Allow: /categories/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sitemap: http://seyvoue.com/sitemap.xml</span><br><span class="line">Sitemap: http://seyvoue.com/baidusitemap.xml</span><br></pre></td></tr></table></figure><h2 id="Google-抓取方式"><a href="#Google-抓取方式" class="headerlink" title="Google 抓取方式"></a>Google 抓取方式</h2><p><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-011840.png" alt=""></p><p>如果上方的输入框留空表示抓取首页，抓取方式可以选择桌面，智能手机等等，自行根据需要选择。填好 url 之后，点击抓取。</p><p>抓取完成后可能会有几种状态：完成、部分完成和已重定向等，不过无需担心，这些状态并不会影响提交。此时点击请求编入索引即可，至此博客就成功提交到了 Google，你的博客在google搜索上排名想不靠前都难了，马上上google搜索一下你的关键词和博客title测试一下吧。</p><h2 id="百度主动提交链接方式"><a href="#百度主动提交链接方式" class="headerlink" title="百度主动提交链接方式"></a>百度主动提交链接方式</h2><p>某些主机，比如Github，禁止百度爬虫访问博客，导致博客无法被百度收录。该方法可直接推送网页的链接给百度而避免百度无法爬取github中链接的问题。</p><p>另外，使用主动推送还会达到如下功效：</p><ul><li>及时发现：可以缩短百度爬虫发现您站点新链接的时间，使新发布的页面可以在第一时间被百度收录</li><li>保护原创：对于网站的最新原创内容，使用主动推送功能可以快速通知到百度，使内容可以在转发之前被百度发现</li></ul><p>step1：进入 <code>百度站长平台</code>，然后再 <code>数据引入-&gt;链接提交-&gt;主动推送</code>中找到token</p><p><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-Screen_Shot_2018-11-26_at_09_25_26.png" alt=""></p><p>step2：安装插件 <code>hexo-baidu-url-submit</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>step3：在 <code>blog/_config.yml</code> 中添加一些内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">3</span> <span class="comment">## 比如3，代表提交最新的三个链接</span></span><br><span class="line"><span class="attr">  host:</span> <span class="attr">https://seyvoue.com</span> <span class="comment">## 在百度站长平台中注册的域名</span></span><br><span class="line"><span class="attr">  token:</span> <span class="string">eszIK5AKJsyOAD9l</span> <span class="comment">## 请注意这是您的秘钥， 请不要发布在公众仓库里!</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">baidu_urls.txt</span> <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><p>step4：查看<code>blog/_config.yml</code>文件中 url 的值， 必须包含是百度站长平台注册的域名，比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: http://seyvoue.com</span><br><span class="line">root: /</span><br><span class="line">#permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: posts/:category/:abbrlink.html</span><br></pre></td></tr></table></figure></p><p>step5：在<code>blog/_config.yml</code>添加新的 deploy type：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:seyvoue/seyvoue.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@git.coding.net:seyvoue/seyvoue.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">baidu_url_submitter</span> <span class="comment">##增加这个!!!</span></span><br></pre></td></tr></table></figure><p>之后执行<code>hexo deploy</code>后该插件将自动进行主动推送至百度。</p><h2 id="百度自动提交链接方式"><a href="#百度自动提交链接方式" class="headerlink" title="百度自动提交链接方式"></a>百度自动提交链接方式</h2><p>修改主题配置文件<code>blog/themes/next/_config.yml</code>的<code>baidu_push</code>字段为<code>true</code>，如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://support.google.com/webmasters/answer/6065809?hl=zh-Hans&amp;ref_topic=6065797" target="_blank" rel="noopener">了解抓取和呈现的重要性-google search console</a></li><li><a href="https://hui-wang.info/2016/10/23/Hexo%E6%8F%92%E4%BB%B6%E4%B9%8B%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%93%BE%E6%8E%A5/" target="_blank" rel="noopener">Hexo插件之百度主动提交链接</a></li><li><a href="https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">Hexo博客Next主题SEO优化方法</a></li><li><a href="https://hjptriplebee.github.io/hexo%E7%9A%84SEO%E6%96%B9%E6%B3%95.html/" target="_blank" rel="noopener">hexo的SEO方法</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍 Hexo 博客的SEO优化方法，让你的博客被 google 和 baidu 收录，并提高博文在搜索引擎的排名。&lt;/p&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="hexo" scheme="http://seyvoue.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>@Node.js的安装及其版本管理神器 nvm（macOS Mojave）</title>
    <link href="http://seyvoue.com/manual/9e29d568.html"/>
    <id>http://seyvoue.com/manual/9e29d568.html</id>
    <published>2018-11-22T13:52:32.000Z</published>
    <updated>2019-06-09T07:11:51.691Z</updated>
    
    <content type="html"><![CDATA[<p>建议使用 nvm 管理计算机中的 Node.js，如果你已经安装过 Node.js ，可以先删除,如何删除參考<a href="http://phoeshow.github.io/2017/05/15/Mac%E5%88%A0%E9%99%A4nodejs%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">这篇文章</a>。</p><a id="more"></a><h2 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h2><p>step1: 使用 Homebrew 來安裝 nvm<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew install nvm</span><br></pre></td></tr></table></figure></p><p>step2: 修改<code>~/.zshrc</code>（因为笔者默认的 shell 为 zsh）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#nvm</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">source $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure></p><p>step3：验证是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nvm --version</span><br><span class="line">0.33.11</span><br></pre></td></tr></table></figure></p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>step1: 查看可安装的 node 版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> nvm ls-remote</span><br><span class="line">        v0.1.14</span><br><span class="line">        v0.1.15</span><br><span class="line">        v0.1.16</span><br><span class="line">        v0.1.17</span><br><span class="line">        ...</span><br><span class="line">        v8.11.4   (LTS: Carbon)</span><br><span class="line">        v8.12.0   (LTS: Carbon)</span><br><span class="line">        v8.13.0   (Latest LTS: Carbon)</span><br><span class="line">        v10.10.0</span><br><span class="line">       v10.11.0</span><br><span class="line">       v10.12.0</span><br><span class="line">       v10.13.0   (Latest LTS: Dubnium)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p>step2：安装 Node.js，这里安装 <code>10.13.0</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> nvm install 10.13.0</span><br></pre></td></tr></table></figure></p><p>也可以直接安装目前的稳定版：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> nvm install stable</span><br></pre></td></tr></table></figure></p><p>step3: 切换到想用的 Node.js 版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> nvm use 10.13.0</span><br></pre></td></tr></table></figure></p><p>step4：验证 Node.js 是否安装成功<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> node -v</span><br><span class="line">v10.13.0</span><br></pre></td></tr></table></figure></p><p><code>nvm</code> 会将 不同版本的 <code>node</code> 安装在<code>$NVM_DIR/versions/</code>目录下，如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> type node</span><br><span class="line">node is /Users/seyvoue/.nvm/versions/node/v10.13.0/bin/node</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;建议使用 nvm 管理计算机中的 Node.js，如果你已经安装过 Node.js ，可以先删除,如何删除參考&lt;a href=&quot;http://phoeshow.github.io/2017/05/15/Mac%E5%88%A0%E9%99%A4nodejs%E7%9A%84%E6%96%B9%E6%B3%95/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="nodejs" scheme="http://seyvoue.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>@手把手教你如何搭建个人博客（四）</title>
    <link href="http://seyvoue.com/manual/ea65db2f.html"/>
    <id>http://seyvoue.com/manual/ea65db2f.html</id>
    <published>2018-11-22T07:42:26.000Z</published>
    <updated>2019-06-09T07:11:51.707Z</updated>
    
    <content type="html"><![CDATA[<p>本文将以 Next 主题为例，教你如何进一步定制/优化自己的博客，扩展博客的功能。<br>环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">os: macOS Majave</span><br><span class="line">hexo: 1.1.0</span><br><span class="line">node: 10.13.0</span><br><span class="line">theme: NexT.Mist v6.5.0</span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --version</span><br><span class="line">hexo: 3.8.0</span><br><span class="line">hexo-cli: 1.1.0</span><br><span class="line">os: Darwin 18.2.0 darwin x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 10.13.0</span><br><span class="line">v8: 6.8.275.32-node.36</span><br><span class="line">uv: 1.23.2</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.14.0</span><br><span class="line">modules: 64</span><br><span class="line">nghttp2: 1.34.0</span><br><span class="line">napi: 3</span><br><span class="line">openssl: 1.1.0i</span><br><span class="line">icu: 62.1</span><br><span class="line">unicode: 11.0</span><br><span class="line">cldr: 33.1</span><br><span class="line">tz: 2018e</span><br></pre></td></tr></table></figure><p><strong>建议：</strong> 在定制博客前完成博客的备份工作，方便回滚和记录博客的变更。</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p>授之于鱼不如授之于渔<br>希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)</p></blockquote><p>我们需要改的文件其实也就那么几个，大部分是不需要更改的，NexT 都已经帮我们配置好了~</p><h3 id="了解-hexo-引擎博客的目录结构"><a href="#了解-hexo-引擎博客的目录结构" class="headerlink" title="了解 hexo 引擎博客的目录结构"></a>了解 hexo 引擎博客的目录结构</h3><p>默认目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy_git</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">├── themes</span><br><span class="line">├── _config.yml</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><ul><li>.deploy_git：执行 <code>hexo deploy</code> 命令部署到GitHub上的内容目录</li><li>public：执行 <code>hexo generate</code> 命令，输出的静态网页内容目录</li><li>scaffolds：layout模板文件目录，其中的 <code>md</code>文件可以添加编辑</li><li>scripts：扩展脚本目录，这里可以自定义一些 javascript 脚本</li><li>source：文章源码目录，该目录下的 markdown 和 html 文件均会被 Hexo 处理。该页面对应 repo 的根目录，404文件、favicon.ico 文件，CNAME 文件等都应该放这里，该目录下可新建页面目录。<ul><li>drafts：草稿文章</li><li>posts：发布文章</li></ul></li><li>themes：主题文件目录</li><li>_config.yml：<strong>全局配置文件</strong>，大多数的设置都在这里</li><li>package.json：应用程序数据，指明 Hexo 的版本、已安装插件等信息，类似于一般软件中的关于按钮</li></ul><p>我们最先修改的应该是在 Hexo 根目录下的配置文件 <code>_config.yml</code> 文件，这里是配置整个站点的配置信息。</p><p>其次就是我们的<strong>主题配置文件</strong>，在对应的主题下的 <code>_config.yml</code> 因为我使用的是 NexT 主题，所以目录的路径为 <code>blog\themes\next\_config.yml</code> 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为 false，我们需要将其改为 true 并且配置相应的app_key 就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)</p><p>然后我们需要修改样式的话是需要设置 css 和甚至是修改模板。页面展现的全部逻辑都在每个主题中控制，源代码在 <code>hexo\themes\你使用的主题\</code> 中。</p><h3 id="NexT-主题的目录结构"><a href="#NexT-主题的目录结构" class="headerlink" title="NexT 主题的目录结构"></a>NexT 主题的目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">├── .github            #git信息</span><br><span class="line">├── languages          #多语言</span><br><span class="line">|   ├── default.yml    #默认语言</span><br><span class="line">|   └── zh-Hans.yml    #简体中文</span><br><span class="line">|   └── zh-tw.yml      #繁体中文</span><br><span class="line">|   └── ...</span><br><span class="line">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span><br><span class="line">|   ├── _custom        #可以自己修改的模板，覆盖原有模板</span><br><span class="line">|   |   ├── _header.swig    #头部样式</span><br><span class="line">|   |   ├── _sidebar.swig   #侧边栏样式</span><br><span class="line">|   ├── _macro        #可以自己修改的模板，覆盖原有模板</span><br><span class="line">|   |   ├── post.swig    #文章模板</span><br><span class="line">|   |   ├── reward.swig    #打赏模板</span><br><span class="line">|   |   ├── sidebar.swig   #侧边栏模板</span><br><span class="line">|   ├── _partial       #局部的布局</span><br><span class="line">|   |   ├── head       #头部模板</span><br><span class="line">|   |   ├── search     #搜索模板</span><br><span class="line">|   |   ├── share      #分享模板</span><br><span class="line">|   ├── _script        #局部的布局</span><br><span class="line">|   ├── _third-party   #第三方模板</span><br><span class="line">|   ├── _layout.swig   #主页面模板</span><br><span class="line">|   ├── index.swig     #主页面模板</span><br><span class="line">|   ├── page.swig      #页面模板</span><br><span class="line">|   └── tag.swig       #tag模板</span><br><span class="line">├── scripts            #script源码</span><br><span class="line">|   ├── tags           #tags的script源码</span><br><span class="line">|   ├── marge.js       #页面模板</span><br><span class="line">├── source             #源码</span><br><span class="line">|   ├── css            #css源码</span><br><span class="line">|   |   ├── _common    #*.styl基础css</span><br><span class="line">|   |   ├── _custom    #*.styl局部css</span><br><span class="line">|   |   └── _mixins    #mixins的css</span><br><span class="line">|   ├── fonts          #字体</span><br><span class="line">|   ├── images         #图片</span><br><span class="line">|   └── js             #javascript源代码</span><br><span class="line">├── _config.yml        #主题配置文件</span><br><span class="line">└── README.md          #用GitHub的都知道</span><br></pre></td></tr></table></figure><h2 id="定制博客"><a href="#定制博客" class="headerlink" title="定制博客"></a>定制博客</h2><h3 id="添加-changelog-页"><a href="#添加-changelog-页" class="headerlink" title="添加 changelog 页"></a>添加 changelog 页</h3><p><strong>建议：</strong>先给博客增加 changelog 页，即使你不想增加这个页面，其中的 git commit 规范对你也会很有帮助。</p><p>changelog 符合 <code>AngularJS</code> 规范，借助工具基于 git commit message 自动生成。相关介绍可参考：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">Commit message 和 Change log 编写指南, from 阮一峰</a></li><li><a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#type" target="_blank" rel="noopener">Contributing to Angular，from github</a></li><li><a href="https://www.my-fe.pub/post/git-commit-specification.html" target="_blank" rel="noopener">git-commit的规范</a></li><li><a href="https://juejin.im/post/5bd2debfe51d457abc710b57" target="_blank" rel="noopener">规范你的 commit message 并且根据 commit 自动生成 CHANGELOG.md</a></li><li><a href="https://juejin.im/post/5b624d42f265da0fa1223ffa" target="_blank" rel="noopener">如何打造规范的开源项目workflow</a></li><li><a href="http://lyn.s76.org/2017/06/04/commit-format-rules/" target="_blank" rel="noopener">如何规范 commit comment</a></li><li><a href="https://zhuanlan.zhihu.com/p/34223150" target="_blank" rel="noopener">优雅的提交你的 Git Commit Message</a></li><li><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen, from github</a></li><li><a href="https://github.com/marionebl/commitlint" target="_blank" rel="noopener">commitlint, from github</a></li><li><a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky, from github</a></li></ul><blockquote><p>step1: 自动化生成符合 Angular 规范的 changelog，所需的插件安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> local Installing the command line tool</span><br><span class="line"><span class="meta">$</span> npm install --save-dev commitizen</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Install your preferred commitizen adapter globally</span><br><span class="line"><span class="meta">$</span> npm install --save-dev cz-conventional-changelog</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>OR initialize your project to use the cz-conventional-changelog adapter by typing: </span><br><span class="line"><span class="meta">$</span> npx commitizen init cz-conventional-changelog --save-dev --save-exact</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>Install commitlint cli and conventional config</span><br><span class="line"><span class="meta">$</span> npm install --save-dev @commitlint/&#123;config-conventional,cli&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>Configure commitlint to use conventional config</span><br><span class="line"><span class="meta">$</span> echo "module.exports = &#123;extends: ['@commitlint/config-conventional']&#125;" &gt; commitlint.config.js</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>install husky</span><br><span class="line"><span class="meta">$</span> npm install husky --save-dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>install conventional-changelog-cli</span><br><span class="line"><span class="meta">$</span> npm install --save-dev conventional-changelog-cli</span><br></pre></td></tr></table></figure><p>step2：在 <code>blog/package.json</code> 中添加：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"husky"</span>: &#123;</span><br><span class="line">    <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">      <span class="attr">"commit-msg"</span>: <span class="string">"commitlint -E HUSKY_GIT_PARAMS"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"commit"</span>: <span class="string">"git-cz"</span>,</span><br><span class="line">    <span class="attr">"changelog"</span>: <span class="string">"conventional-changelog -p angular -i /Users/seyvoue/personal/data/blog/source/changelog/index.md -s -w -r 0"</span>,</span><br><span class="line">    <span class="attr">"addChangeLog"</span>: <span class="string">"conventional-changelog -p angular -i /Users/seyvoue/personal/data/blog/source/changelog/index.md -s"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>step3: 博客增加 changelog 页面<br>首先，新建页面：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new page changelog</span><br></pre></td></tr></table></figure></p><p>执行完后，删除<code>blog/source/changelog</code>下刚生成的<code>index.md</code>文件。</p><p>然后，修改主题配置文件<code>blog/themes/next/_config.yml</code>，增加<code>changelog</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">  changelog:</span> <span class="string">/changelog/</span></span><br></pre></td></tr></table></figure></p><p>然后，修改<code>blog/themes/next/languages/zh-CN.yml</code>，增加<code>changelog</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">首页</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">归档</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="comment">#告知 hexo 将 changelog 翻译为 “变更”</span></span><br><span class="line"><span class="attr">  changelog:</span> <span class="string">变更</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">关于</span></span><br><span class="line"><span class="attr">  search:</span> <span class="string">搜索</span></span><br><span class="line"><span class="attr">  schedule:</span> <span class="string">日程表</span></span><br><span class="line"><span class="attr">  sitemap:</span> <span class="string">站点地图</span></span><br><span class="line"><span class="attr">  commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br></pre></td></tr></table></figure></p><p>然后，生成 changelog，你只需执行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> conventional-changelog -p angular -i /Users/seyvoue/google-drive/blog/source/changelog/index.md -s -w -r 0</span><br></pre></td></tr></table></figure></p><p>执行<code>hexo clean; hexo g; hexo d</code>将博客发布，即可在博客中看到新增了一个名为<code>变更</code>的页面，里面的内容即为刚刚生成的 changelog。</p><p><strong>以后只需执行以下代码，即可自动生成 changelog。</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>全部重新生成changlog</span><br><span class="line"><span class="meta">$</span> npm run changelog</span><br><span class="line">增量生成changelog 不会覆盖以前的changelog</span><br><span class="line"><span class="meta">$</span> npm run addChangeLog</span><br></pre></td></tr></table></figure></p><h3 id="添加标签页"><a href="#添加标签页" class="headerlink" title="添加标签页"></a>添加标签页</h3><p>step1: 新建页面<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new page tags</span><br></pre></td></tr></table></figure></p><p>执行上述命令，将会在 <code>blog/source/</code> 下新增 <code>tages</code> 目录，且在该目录下会新增文件<code>index.md</code></p><p>step2: 修改<code>blog/source/tags/index.md</code>的内容为如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-11-20 05:40:58</span><br><span class="line">type: "tags"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>step3: 修改 <code>博客根目录/themes/next/_config.yml</code><br>添加 <code>tags</code> 到 <code>menu</code>中<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span></span><br></pre></td></tr></table></figure></p><h3 id="添加分类页"><a href="#添加分类页" class="headerlink" title="添加分类页"></a>添加分类页</h3><p>同 添加标签页，故略。</p><h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>修改 <code>blog/themes/next/_config.yml</code> 中 <code>url</code>字段：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span> </span><br><span class="line">  <span class="comment">#url 为你头像的路径</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2017-08-08-avatar.jpg</span></span><br><span class="line"><span class="attr">  rounded:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  opacity:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>其中的 <code>rounded</code> 控制头像为圆形/正方形，<code>rotated</code>字段控制鼠标悬停时头像是否旋转。</p><p>Note：本文将头像上传到了图床，故 <code>url</code> 为网址，你也可以参考<a href="https://juejin.im/post/58eb2fd2a0bb9f006928f8c7" target="_blank" rel="noopener">此文</a>将头像上传到本地，并指定为本地的路径。</p><h3 id="侧边栏添加社交信息"><a href="#侧边栏添加社交信息" class="headerlink" title="侧边栏添加社交信息"></a>侧边栏添加社交信息</h3><p>修改 <code>blog/_config.yml</code> 中的 <code>social</code>字段：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="comment">#在这里添加你的社交链接</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/yourname</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  E-Mail:</span> <span class="attr">mailto:your</span> <span class="string">eamil</span> <span class="string">address</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || weibo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制是否显示社交图标  </span></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  icons_only:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h3 id="修改博客底部建站时间和图标"><a href="#修改博客底部建站时间和图标" class="headerlink" title="修改博客底部建站时间和图标"></a>修改博客底部建站时间和图标</h3><p>这个时间将在站点的底部显示，例如 <code>© 2013 - 2015</code>。 编辑 <code>blog/themes/next/_config.yml</code>。其中 icon 的内容去<code>https://fontawesome.com/v4.7.0/icons</code>找一个自己喜欢的 icon，如：将 icon name 替换为<code>fighter-jet</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在这里修改建站时间</span></span><br><span class="line"><span class="attr">since:</span> <span class="number">2016</span></span><br><span class="line"></span><br><span class="line"><span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name 去上面提到的那个网站找</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">fighter-jet</span></span><br><span class="line">    <span class="comment"># 控制图标动画</span></span><br><span class="line"><span class="attr">    animated:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 控制图标颜色</span></span><br><span class="line"><span class="attr">    color:</span> <span class="string">"#808080"</span></span><br></pre></td></tr></table></figure><h3 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h3><p>修改主题配置文件<code>bolg/themes/next/_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支持的主题有: normal | night | night eighties | night blue | </span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span></span><br></pre></td></tr></table></figure><h3 id="增加代码块复制功能"><a href="#增加代码块复制功能" class="headerlink" title="增加代码块复制功能"></a>增加代码块复制功能</h3><p>修改主题配置文件<code>blog/themes/next/_config.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line"><span class="attr">  border_radius:</span></span><br><span class="line">  <span class="comment">#在代码块的右上角添加悬浮显示的复制按钮</span></span><br><span class="line"><span class="attr">  copy_button:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    show_result:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h3 id="增加代码块折叠功能"><a href="#增加代码块折叠功能" class="headerlink" title="增加代码块折叠功能"></a>增加代码块折叠功能</h3><p>关于如何实现 hexo next 显示/隐藏代码块？大多用的都是<a href="https://blog.rmiao.top/hexo-fold-block/" target="_blank" rel="noopener">此文</a>的方法，该方法太过于繁琐，其实 markdown 本身便支持显示/隐藏代码块功能，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;&lt;summary&gt;点击显/隐内容&lt;/summary&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line"></span><br><span class="line">此处为要显示/隐的内容，亦可在此添加代码块，注意上下各空一行，</span><br><span class="line"></span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><details><summary>点击显/隐内容</summary><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"hello world!"</span>)</span><br></pre></td></tr></table></figure></p></details><p>注意：<code>&lt;p&gt;&lt;/p&gt;</code>之间需要隐藏的内容要空一行。</p><h3 id="文章末尾增加版权信息页"><a href="#文章末尾增加版权信息页" class="headerlink" title="文章末尾增加版权信息页"></a>文章末尾增加版权信息页</h3><p>step1: 查看并确认 <code>blog/themes/next/layout/_macro/post.swig</code>的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.creative_commons.license and theme.creative_commons.post and not is_index %&#125;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;% include &apos;../_partials/post-copyright.swig&apos; with &#123; post: post &#125; %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>从这段代码可以看出，是否显示版权信息，依赖三个变量的值，分别是：</p><ul><li><code>theme.creative_commons.license</code> 不为空</li><li><code>theme.creative_commons.post</code> 应为 true</li><li><code>is_index</code> 不是 index 页</li></ul><p>以上三个变量可在<code>blog/themes/next/_config.yml</code>进行修改。</p><p>step2: 修改<code>博客根目录/themes/next/_config.yml</code>为：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line"><span class="attr">  license:</span> <span class="string">by-nc-sa</span> <span class="comment"># &lt;--看这里！！！</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  post:</span> <span class="literal">true</span> <span class="comment"># &lt;--看这里！！！</span></span><br></pre></td></tr></table></figure></p><p>step3: 修改 <code>blog/themes/next/languages/zh-CN.yml</code>中 <code>copyright</code>字段下的内容：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">  copy_success:</span> <span class="string">复制成功</span></span><br><span class="line"><span class="attr">  copy_failure:</span> <span class="string">复制失败</span></span><br><span class="line"><span class="attr">  copyright:</span> <span class="comment"># &lt;--看这里！！！修改为以下内容</span></span><br><span class="line"><span class="attr">    author:</span> <span class="string">本文作者</span></span><br><span class="line"><span class="attr">    title:</span> <span class="string">本文标题</span></span><br><span class="line"><span class="attr">    posted:</span> <span class="string">发布时间</span></span><br><span class="line"><span class="attr">    modified:</span> <span class="string">最后更新</span></span><br><span class="line"><span class="attr">    link:</span> <span class="string">本文链接</span></span><br><span class="line"><span class="attr">    license_title:</span> <span class="string">版权声明</span></span><br><span class="line"><span class="attr">    license_content:</span> <span class="string">"本博客所有文章除特别声明外，均采用 %s 许可协议。转载请注明出处！"</span></span><br></pre></td></tr></table></figure></p><p>step4: 确认<code>themes/next/source/css/_common/components/post/</code>下有<code>post-copyright.styl</code>和 <code>post.style</code></p><p>若没有，则手动添加这两个文件。</p><ul><li><code>post-copyright.styl</code>的内容如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.post-copyright &#123;</span><br><span class="line">  margin: $post-copyright.margin;</span><br><span class="line">  padding: $post-copyright.padding;</span><br><span class="line">  border-left: $post-copyright.border.width $post-copyright.border.style $post-copyright.border.color;</span><br><span class="line">  background-color: $post-copyright.bg;</span><br><span class="line">  list-style: none;</span><br><span class="line"></span><br><span class="line">  i.fa &#123;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>post.style</code>含有以下代码段：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;post-copyright&quot; if hexo-config(&apos;creative_commons.post&apos;);</span><br></pre></td></tr></table></figure><p>step5: 确认并修改<code>blog/themes/next/layout/_partials/post-copyright.swig</code>为以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set ccLicense = theme.creative_commons.license | lower %&#125;</span><br><span class="line">&#123;% set ccIcon = &apos;&lt;i class=&quot;fa fa-fw fa-creative-commons&quot;&gt;&lt;/i&gt;&apos; %&#125;</span><br><span class="line">&#123;% set ccText = ccLicense | upper %&#125;</span><br><span class="line">&#123;% if ccLicense === &apos;zero&apos; %&#125;</span><br><span class="line">  &#123;% set ccType = &apos;publicdomain/zero/1.0/&apos; %&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  &#123;% set ccType = &apos;licenses/&apos; + ccLicense + &apos;/4.0/&apos; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% set ccURL = &apos;https://creativecommons.org/&apos; + ccType %&#125;</span><br><span class="line"></span><br><span class="line">//版权页的内容由以下部分控制，故想定制自己版权页显示的内容可在此修改</span><br><span class="line">&lt;ul class=&quot;post-copyright&quot;&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-author&quot;&gt;</span><br><span class="line">    &lt;strong&gt;&#123;&#123; __(&apos;post.copyright.author&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125; &lt;/strong&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; post.author || author &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-title&quot;&gt;</span><br><span class="line">    &lt;strong&gt;&#123;&#123; __(&apos;post.copyright.title&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125;&lt;/strong&gt;</span><br><span class="line">    &#123;&#123; page.title &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-posted&quot;&gt;</span><br><span class="line">    &lt;strong&gt;&#123;&#123; __(&apos;post.copyright.posted&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125;&lt;/strong&gt;</span><br><span class="line">    &#123;&#123; page.date.format(&quot;YYYY/MM/DD - HH:MM&quot;) &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-modified&quot;&gt;</span><br><span class="line">      &lt;strong&gt;&#123;&#123; __(&apos;post.copyright.modified&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125;&lt;/strong&gt;</span><br><span class="line">      &#123;&#123; page.updated.format(&quot;YYYY/MM/DD - HH:MM&quot;) &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-link&quot;&gt;</span><br><span class="line">    &lt;strong&gt;&#123;&#123; __(&apos;post.copyright.link&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125;&lt;/strong&gt;</span><br><span class="line">    &#123;% set postURL = post.url || post.permalink %&#125;</span><br><span class="line">    &#123;&#123; next_url(postURL, postURL, &#123;title: post.title&#125;) &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-license&quot;&gt;</span><br><span class="line">    &lt;strong&gt;&#123;&#123; __(&apos;post.copyright.license_title&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125; &lt;/strong&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __(&apos;post.copyright.license_content&apos;, next_url(ccURL, ccIcon + ccText)) &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>经过以上五步后，发布的每篇博文都会在文章末尾添加版权信息，其样式如下图所示：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-20-110537.png" alt=""></p><h3 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h3><p>修改主题配置文件<code>blog/themes/next/_config.yml</code>:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  comment:</span> <span class="string">希望对你有帮助！</span></span><br><span class="line"><span class="attr">  wechatpay:</span> <span class="attr">http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2017-08-08-wechatpay.jpg</span></span><br><span class="line"><span class="attr">  alipay:</span> <span class="attr">http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2017-08-08-alipay.jpg</span></span><br></pre></td></tr></table></figure></p><h3 id="唯一化链接"><a href="#唯一化链接" class="headerlink" title="唯一化链接"></a>唯一化链接</h3><p>也许你会数次更改文章题目或者变更文章发布时间，在默认设置下，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择。安装插件<code>hexo-abbrlink</code>后，不要在 <code>hexo s</code> 模式下更改文章文件名，否则文章将成空白。</p><p>修改前每篇博文的链接形式为<code>http://yoursite.com/posts/文章标题</code>，若博文包含中文或标点符号，则链接会变得很丑且若文章标题发生变更，则之前的链接可能会失效。通过以下配置，给每篇博文生成一个固定的<code>abbrlink</code>，可解决上述问题。<br>修改后博文的链接变更为<code>http://yoursite.com/posts/:categories/:abbrlink.html</code>。<br>如：<code>http://www.seyvoue.com/posts/tech/e2a845a8.html</code></p><p>step1: 安装 <code>hexo-abbrlink</code> 插件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></p><p>step2: 修改 <code>blog/_config.yml</code> 为以下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">http://yoursite.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:category/:abbrlink.html</span>  <span class="comment"># “posts/:category” 可自行更换</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line"><span class="attr">  alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line"><span class="attr">  rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure></p><p>其中的 <code>permalink</code> 也可以为 <code>posts/:abbrlink</code>，但还是建议在末尾加上<code>html</code>，便于被识别为静态网页。</p><h3 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h3><p>打开文件<code>themes\next\source\css\_common\components\post\post.styl</code>，在末尾添加以下css样式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #0593d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中颜色可以自定义,在这里选中状态为橙色,链接样式为蓝色。选择<code>.post-body</code>是为了不影响标题，选择<code>p</code>是为了不影响首页 “阅读全文” 的显示样式。</p><h3 id="添加博文搜索功能"><a href="#添加博文搜索功能" class="headerlink" title="添加博文搜索功能"></a>添加博文搜索功能</h3><p>静态站关于实现站内搜索的方式，它有两种方式：一是本地建立索引，二是采用第三方线上服务。在 next 主题所在目录下的 <code>/layout/_partials/search</code> 目录中分别有三个文件：<code>localsearch.swig</code>、<code>swiftype.swig</code>、<code>tinysou.swig</code> ，其中 <code>tinysou</code> 这个项目已经很长时间没在维护了，不推荐使用。剩下的两个就是本地搜索和第三方线上服务。然而 <code>swiftype</code> 不再提供免费账户(老用户还可以免费用)了，那剩下的就只有 <code>localsearch</code> 这条路了。</p><p>step1：安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>step2：在 <code>blog/_config.yml</code>中添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#search</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p><p>step3：编辑主题配置文件<code>blog/themes/next/_config.yml</code>，弃用本地搜索功能：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h3 id="添加文章字数统计功能"><a href="#添加文章字数统计功能" class="headerlink" title="添加文章字数统计功能"></a>添加文章字数统计功能</h3><p>step1：安装插件 <code>hexo-symbols-count-time</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>step2：在<code>blog/_config.yml</code>中添加以下内容：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#wordcount</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="comment"># 文章内是否显示</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 网页底部是否显示</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>step3：在<code>blog/themes/next/_config.yml</code> 修改<code>symbols_count_time</code> 下的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  #文章中的显示是否显示文字（本文字数|阅读时长）</span><br><span class="line">  item_text_post: false</span><br><span class="line">  #网页底部的显示是否显示文字（站点总字数|站点阅读时长）</span><br><span class="line">  item_text_total: true</span><br><span class="line">  # Average Word Length (chars count in word)</span><br><span class="line">  awl: 2</span><br><span class="line">  # Words Per Minute</span><br><span class="line">  wpm: 300</span><br></pre></td></tr></table></figure><p><strong>Note：</strong> 字段<code>awl</code>和<code>wpm</code>的设置可参考<code>https://github.com/theme-next/hexo-symbols-count-time</code></p><h3 id="添加文章阅读次数统计功能"><a href="#添加文章阅读次数统计功能" class="headerlink" title="添加文章阅读次数统计功能"></a>添加文章阅读次数统计功能</h3><p>关于这部分内容也可参考：</p><ul><li><a href="https://leaferx.online/2018/02/11/lc-security/" target="_blank" rel="noopener">Leancloud访客统计插件重大安全漏洞修复指南</a></li><li><a href="https://www.alankeene.com/2018/0412/next-problems.html" target="_blank" rel="noopener">【NexT】用hexo框架NexT主题搭建博客踩过的坑</a></li><li><a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a></li></ul><p>step1：前往 <a href="https://leancloud.cn/" target="_blank" rel="noopener">Leancloud</a> 官网进行注册，并登陆。</p><p>step2：然后依次点击<code>控制台-&gt;创建应用</code>，应用名称随意，这里命名为<code>seyvoue-blog</code>：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-053709.png" alt=""></p><p>创建完成后，会出现：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-053754.png" alt=""></p><p>step3：设置Web安全域名确保域名调用安全，依次点击<code>设置-&gt;安全中心</code>，然后再 web 安全域名中填入你自己的域名：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-054542.png" alt=""></p><p>step4：依次点击<code>设置-&gt;存储-&gt;创建 class</code>，新建一个名为<code>Counter</code>的 Class，并指定为<code>无限制</code>，如下图：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-053920.png" alt=""></p><p>step5：依次点击<code>设置-&gt;应用 key</code>，将会看到该应用的 <code>APP ID</code> 和 <code>APP KEY</code><br>粘贴<code>App ID</code>和<code>App Key</code>到主题配置文件·<code>blog/themes/next/_config.yml</code>对应位置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">粘贴到这</span> <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">粘贴到这</span> <span class="comment">#&lt;app_key&gt;</span></span><br><span class="line"><span class="attr">  security:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  betterPerformance:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>以上五步便可完成阅读次数统计的功能，接下类的内容为可选项，目的是为了保证阅读次数统计功能的安全性以及放置被恶意篡改。</p><h4 id="部署云引擎以保证访客数量不被随意篡改（可选，建议设置）"><a href="#部署云引擎以保证访客数量不被随意篡改（可选，建议设置）" class="headerlink" title="部署云引擎以保证访客数量不被随意篡改（可选，建议设置）"></a>部署云引擎以保证访客数量不被随意篡改（可选，建议设置）</h4><p>step1：依次点击<code>云引擎-&gt;部署-&gt;在线编辑</code>：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-055332.png" alt=""></p><p>step2：点击创建函数，按下图完成函数的创建：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-064308.png" alt=""><br>其中的代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var query = new AV.Query(&quot;Counter&quot;);</span><br><span class="line">if (request.object.updatedKeys.indexOf(&apos;time&apos;) !== -1) &#123;</span><br><span class="line">    return query.get(request.object.id).then(function (obj) &#123;</span><br><span class="line">        if (obj.get(&quot;time&quot;) + 1 !== request.object.get(&quot;time&quot;)) &#123;</span><br><span class="line">            throw new AV.Cloud.Error(&apos;Invalid update!&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>step3：部署到生产环境，如下图，点击<code>部署</code>：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-055749.png" alt=""></p><p>等待出现<code>部署成功</code>字样后，关闭<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-055923.png" alt=""></p><p>以上，便完成了云引擎的部署，任何非法的访客数量更改请求都将失败。</p><h4 id="进一步设置权限（可选，建议设置）"><a href="#进一步设置权限（可选，建议设置）" class="headerlink" title="进一步设置权限（可选，建议设置）"></a>进一步设置权限（可选，建议设置）</h4><p>step1：修改主题配置文件<code>blog/themes/next/_config.yml</code>，将其中的<code>security</code>字段设为 true<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">TyFNsWV8F6tFUPr7cq0lXU32-9Nh9j0Va</span> <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">TW5MEsTnMVUdznvEagcTrSBa</span> <span class="comment">#&lt;app_key&gt;</span></span><br><span class="line"><span class="attr">  security:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  betterPerformance:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>step2：安装插件<code>hexo-leancloud-counter-security</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-leancloud-counter-security --save</span><br></pre></td></tr></table></figure><blockquote><p>对<code>betterPerformance</code>选项的说明：<br>由于Leancloud免费版的云引擎存在请求线程数和运行时间限制以及休眠机制，很多时候访客<br>数量加载会很慢。如果设置betterPerformance为true，则网页则会在提交请求之前直接显<br>示访客人数为查询到的人数+1，以增加用户体验。</p></blockquote><p>step3：在全局配置文件<code>blog/_config.yml</code>中添加：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line"><span class="attr">  enable_sync:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;</span></span><br><span class="line"><span class="attr">  username:</span> </span><br><span class="line"><span class="attr">  password:</span></span><br></pre></td></tr></table></figure></p><p><strong>Note：</strong> 将 <code>username</code> 和 <code>password</code> 替换为你自己的用户名和密码（不必与<code>leancloud</code>的账号）相同。此用户名和密码将在hexo部署时使用。</p><p>step4：安装插件 <code>hexo-leancloud-counter-security</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-leancloud-counter-security --save</span><br></pre></td></tr></table></figure><p>step5：使用插件 <code>hexo-leancloud-counter-security</code> 设定部署使时的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo lc-counter register &lt;&lt;username&gt;&gt; &lt;&lt;password&gt;&gt;</span><br></pre></td></tr></table></figure><p>step6：修改全局配置文件<code>blog/_config.yml</code>，将<code>username</code>和<code>password</code>替换为你刚刚设置的用户名和密码，但建议将 <code>password</code> 留空<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line"><span class="attr">  enable_sync:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">&lt;&lt;your</span> <span class="string">username&gt;&gt;</span> <span class="comment">#如留空则将在部署时询问</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">&lt;&lt;your</span> <span class="string">password&gt;&gt;</span> <span class="comment">#建议留空以保证安全性，如留空则将在部署时询问</span></span><br></pre></td></tr></table></figure></p><p>step7：在全局配置文件<code>blog/_config.yml</code>的<code>deploy</code>下添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="comment"># other deployer</span></span><br><span class="line"><span class="attr">  - type:</span> <span class="string">leancloud_counter_security_sync</span></span><br></pre></td></tr></table></figure><p>step8：返回 <code>LeanCloud 控制台</code>页面，依次点击<code>存储-&gt;_User</code>，发现<code>_User</code>表中会新增一条记录，如下：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-Screen_Shot_2018-11-26_at_16_33_17.png" alt=""><br>若没有新增记录，最简单的办法重头来过，严格按照本教程的顺序操作。</p><p>step8：在<code>LeanCloud 控制台</code>页面，依次点击<code>存储-&gt;Counter</code>，进入 <code>Counter</code>表，打开权限设置：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-Screen_Shot_2018-11-26_at_16_38_22.png" alt=""></p><ul><li><p>设置 <code>addField</code> 权限为：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-Screen%20Shot%202018-11-26%20at%2016.46.41.png" alt=""></p></li><li><p>设置 <code>Create</code> 权限为：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-Screen_Shot_2018-11-26_at_16_46_08-2.png" alt=""></p></li><li><p>设置 <code>Delete</code> 权限为：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-Screen_Shot_2018-11-26_at_16_46_22.png" alt=""></p></li></ul><p>至此权限已设置完成，数据库记录只能在本地增删。<br>每次运行 <code>hexo d</code> 部署的时候，插件都会扫描本地source/_posts下的文章并与数据库对比，然后在数据库创建没有录入数据库的文章记录。<br>如果在博客配置文件中留空username或password，则在部署过程中程序会要求输入。</p><h4 id="关于-ERROR-Too-many-requests-429"><a href="#关于-ERROR-Too-many-requests-429" class="headerlink" title="关于 ERROR Too many requests 429"></a>关于 ERROR Too many requests 429</h4><p>出现这个问题的报错信息是too many requests,原因是我们使用leanCloud的免费版本线程数是十分受限的,在我们deploy的时候发送了太多的同步请求导致线程栈溢出而报错，解决方法：</p><p>step1：删除<code>blog/public/leancloud.memo</code><br>step2：执行<code>hexo d</code></p><p>如果你博文很多的话，step2 后，可能还是会报 <code>429</code> 错误，忽略此时的报错，继续执行<code>hexo d</code>知道不报<code>429</code>错误为止，你会发现没多执行一次<code>hexo d</code>，<code>leancloud.memo</code>中的记录就会多一些。</p><h3 id="文末添加评论功能"><a href="#文末添加评论功能" class="headerlink" title="文末添加评论功能"></a>文末添加评论功能</h3><p>Hexo的评论系统有很多，常见的有以下几个：</p><ul><li><del>多说</del></li><li><del>网易云跟帖</del></li><li>畅言（来自国内，需要备案号）</li><li>来必力（来自韩国，使用邮箱注册）</li><li>Disqus</li><li>Hypercomments（来自俄罗斯的评论系统，使用谷歌账号注册。）</li><li>valine（基于Leancloud的极简风评论系统）</li><li>gitment</li></ul><p>国内主流评论服务多说，网易云跟帖，停止服务，其次畅言需要备案，Disqus，Hypercomments和LiveRe都是国外的，加载速度贼慢，甚至有被墙的可能。</p><h4 id="使用-gitment"><a href="#使用-gitment" class="headerlink" title="使用 gitment"></a>使用 gitment</h4><p><code>Gitment</code> 是作者实现的一款基于 <code>GitHub Issues</code> 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 <code>Markdown / GFM</code> 和 代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。</p><p>step1：<a href="Register a new OAuth application">Register a new OAuth application</a>，即登录 github 后，依次点击<code>settings-&gt;Developer Settings-&gt;New Oauth App</code></p><p><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-143435.png" alt=""></p><ul><li>Application name：随意</li><li>Homepage URL：你的博客域名或<code>https://xxx.github.io</code></li><li>Application description：随意</li><li>Authorization callback URL：一般与 <code>Homepage URL</code> 相同</li></ul><p><strong>Note：</strong>在初次注册的时候，如何你指定<code>Homepage URL</code>为你购买的域名时，可能会报<code>unvalid url</code>，此时你可以先指定为<code>https://xxx.github.io</code>，等注册完成后，再去修改。</p><p>stpe2：修改主题配置文件<code>blog/themes/next/_config.yml</code>中 <code>gitment</code>下的内容为：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mint:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">  lazy:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">  cleanly:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">  language:</span> </span><br><span class="line"><span class="attr">  github_user:</span> <span class="string">seyvoue</span> <span class="comment"># 你的 github 用户名</span></span><br><span class="line"><span class="attr">  github_repo:</span> <span class="string">seyvoue.github.io</span> <span class="comment"># 你存放评论的 github 仓库地址。方便起见，可选择你的静态博客仓库地址</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="comment">#见 step1 的截图</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="comment"># 见 step1 的截图</span></span><br><span class="line"><span class="attr">  proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line"><span class="attr">  redirect_protocol:</span></span><br></pre></td></tr></table></figure></p><p>step3：安装插件 <code>gitment</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save gitment</span><br></pre></td></tr></table></figure></p><p>以上便完成了 <code>gitment</code> 的配置，接下来你需要随机打开一片博文，滚动到评论区，登录你的 github 账号，然后点击<code>Initialize Comments</code>即可，如下图：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-144107.png" alt=""></p><h5 id="可能会碰到的问题"><a href="#可能会碰到的问题" class="headerlink" title="可能会碰到的问题"></a>可能会碰到的问题</h5><p>使用 <code>gitment</code>，要先在评论区登录 github，否则显示<code>Error: Comments Not Initialized</code>(中文显示评论不可用之类)；登录后点击<code>Initialize Comments</code>。另外可能会报错<code>[object ProgressEvent]</code>或者<code>gh-oauth.imsun.net</code>链接不上。这是因为<code>gh-oauth.imsun.net</code>网站证书失效了！解决方法（可参看<a href="https://github.com/imsun/gitment/issues/102" target="_blank" rel="noopener">imsun/gitment/issues#102</a>，<a href="https://github.com/imsun/gitment/issues/170" target="_blank" rel="noopener">object ProgressEvent</a>）：</p><ul><li>方案一：单独访问这个网站 <code>https://gh-oauth.imsun.net/</code>，加入例外，允许浏览器访问。但这个方案，别人看你博客的人不一定知道要加，所以不好。</li><li>方案二（推荐）：更改<code>node_modules/gitment/dist/gitment.js</code>中<code>https://gh-oauth.imsun.net</code>，直接改为请求 github 认证的接口<code>https://github.com/login/oauth/access_token</code></li></ul><h4 id="使用-Valine（方便，但邮件提醒不方便）"><a href="#使用-Valine（方便，但邮件提醒不方便）" class="headerlink" title="使用 Valine（方便，但邮件提醒不方便）"></a>使用 Valine（方便，但邮件提醒不方便）</h4><p>step1：首先你需要拥有 LeanCloud 账号。具体操作同本文<code>添加文章阅读次数统计功能</code>的 <code>step1-step3</code></p><p>step2：修改主题配置文件 <code>blog/themes/next/_config.yml</code> 中 <code>Valine</code>下的内容为：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span>   </span><br><span class="line"><span class="attr">  appid:</span>  <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span> <span class="comment"># your leancloud application appkey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">昵称--即你的网名；邮箱--请告知我联系你的方式；网址--你正在浏览的这个页面</span> </span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> </span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> </span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> </span><br><span class="line"><span class="attr">  visitor:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>将 <code>enalbe</code> 置为 <code>true</code>，并在<code>appid</code>和<code>appkey</code>填入你<code>step1</code>所创建应用的<code>APP ID</code> 和 <code>APP KEY</code></p><p>至此，执行<code>hexo d</code>部署后，便可在文章的末尾看到新增的 <code>Valine</code> 评论了：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-115938.png" alt=""></p><p>每当新增一条评论，都会在 <code>LeanCloud</code> 的<code>存储-&gt;Comments</code>表中新增一条记录。</p><h5 id="Valine-评论增加邮件提醒功能（未实践）"><a href="#Valine-评论增加邮件提醒功能（未实践）" class="headerlink" title="Valine 评论增加邮件提醒功能（未实践）"></a>Valine 评论增加邮件提醒功能（未实践）</h5><p>首先需要确保 Valine 的基础功能是正常的，即已经可以在文末发起评论，并且当你登录 LeanCloud，可在<code>存储-&gt;Comments</code>表中看到新增的评论，如下图：<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-26-120232.png" alt=""></p><p>接下来的配置过程，可参考：</p><ul><li><a href="https://panjunwen.com/valine-admin-document/" target="_blank" rel="noopener">https://panjunwen.com/valine-admin-document/</a></li><li><a href="https://github.com/panjunwen/Valine-Admin" target="_blank" rel="noopener">https://github.com/panjunwen/Valine-Admin</a></li><li><a href="https://cloud.tencent.com/developer/article/1142490" target="_blank" rel="noopener">Hexo 优化 —- 支持邮件通知的评论 Valine 增强版</a></li><li><a href="https://panjunwen.com/valine-admin-document/" target="_blank" rel="noopener">Valine Admin 配置手册</a></li></ul><h3 id="增加友情链接功能"><a href="#增加友情链接功能" class="headerlink" title="增加友情链接功能"></a>增加友情链接功能</h3><p>在主题配置文件中找到 <code>links</code> 属性，修改 <code>links_title</code> 属性的值为“友情链接”（也可以是其他文字），然后添加上好友的博客名称和博客地址，其格式如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="comment">#links_layout: block</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="attr">  seyvoue:</span> <span class="attr">https://www.seyvoue.com/</span></span><br></pre></td></tr></table></figure><h3 id="设置网页-logo"><a href="#设置网页-logo" class="headerlink" title="设置网页 logo"></a>设置网页 logo</h3><p>主题配置文件<code>blog/themes/next/_config.yml</code>关于网页<code>logo</code>是由<code>favicon</code>控制的，默认提供了四种类型，只需将你的 logo 放入<code>blog/themes/next/source/images/</code>下即可。你也可以将 logo 上传到图床，然后将链接贴到响应类型的后面即可。<br><strong>Note：</strong>一般来说，我们只需要更改 <code>medium</code> 字段的值即可。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span> </span><br><span class="line">  <span class="comment">#small: /images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="comment">#medium: /images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="comment">#apple_touch_icon: /images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="comment">#safari_pinned_tab: /images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure></p><h3 id="增加-RSS-订阅功能"><a href="#增加-RSS-订阅功能" class="headerlink" title="增加 RSS 订阅功能"></a>增加 RSS 订阅功能</h3><p>step1：安装<code>hexo-generator-feed</code>插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>step2：在 <code>blog/_config.yml</code> 中，增加以下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#RSS 订阅插件</span></span><br><span class="line"><span class="attr">plugin:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#RSS 插件配置</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">rss2</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">rss.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  hub:</span></span><br><span class="line"><span class="attr">  content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="增加-404-页面"><a href="#增加-404-页面" class="headerlink" title="增加 404 页面"></a>增加 404 页面</h3><p>step1：创建404页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 404</span><br></pre></td></tr></table></figure></p><p>step2：修改<code>blog/source/404/index.md</code>为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found</span><br><span class="line">comments: false</span><br><span class="line">permalink: /404</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>经过上面的设置后，404界面已生效，其编辑方式与一般文章无异。我们可以在.md文件正文中插入一些 CSS 样式，使得该页面与博客中的一般文章有所区别。</p><p>参考：<a href="http://moxfive.xyz/2015/10/16/hexo-404-page/" target="_blank" rel="noopener">在 Hexo 中创建匹配主题的404页面</a></p><h3 id="文末增加分享功能"><a href="#文末增加分享功能" class="headerlink" title="文末增加分享功能"></a>文末增加分享功能</h3><p>修改主题配置文件<code>blog/themes/next/_config.yml</code>的<code>baidushare</code>字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">baidushare:</span><br><span class="line">    type: button</span><br></pre></td></tr></table></figure><h3 id="博客增加支持-Markdown-语法画流程图"><a href="#博客增加支持-Markdown-语法画流程图" class="headerlink" title="博客增加支持 Markdown 语法画流程图"></a>博客增加支持 Markdown 语法画流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo 官方文档</a></li><li><a href="https://wsgzao.github.io/post/hexo-jacman/#内容发布" target="_blank" rel="noopener">Jacman基于Pacman修改的Hexo主题</a></li><li><a href="https://juejin.im/post/58eb2fd2a0bb9f006928f8c7" target="_blank" rel="noopener">hexo高阶教程：next主题优化之加入网易云音乐、网易云跟帖、炫酷动态背景、自定义样式，打造属于你自己的定制化博客</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将以 Next 主题为例，教你如何进一步定制/优化自己的博客，扩展博客的功能。&lt;br&gt;环境：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;os: macOS Majave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo: 1.1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node: 10.13.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;theme: NexT.Mist v6.5.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="hexo" scheme="http://seyvoue.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>@手把手教你如何搭建个人博客（三）</title>
    <link href="http://seyvoue.com/manual/5d48c24a.html"/>
    <id>http://seyvoue.com/manual/5d48c24a.html</id>
    <published>2018-11-22T07:42:20.000Z</published>
    <updated>2019-06-09T07:11:51.707Z</updated>
    
    <content type="html"><![CDATA[<p>按照前两篇博文便可成功搭建一个外网可访问的个人博客了，笔者将在接下来的两篇教程中，介绍如何对博客进行优化。Hexo 默认的主题 <code>landscape</code>比较大众，本文将介绍如何更换博客的主题，以及如何进行博客的备份和恢复。</p><a id="more"></a><p>你可以在这里寻找主题：</p><ul><li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo-theme</a></li><li><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">hexo-github-theme-list</a></li><li><a href="http://www.zhihu.com/question/24422335" target="_blank" rel="noopener">有那些好看的hexo主题？—知乎</a></li></ul><p>我选择的是:</p><ul><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">IIssNan 的 NexT</a></li></ul><p>那么，如何将当前的主题更换为 NexT ？</p><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>将主题 <code>clone</code> 到博客目录下的 themes 文件夹中(即 <code>blog/themes</code>)</p><p>将主题 <code>clone</code> 到博客目录下的 themes 文件夹中(即 <code>blog/themes</code>)</p><p><strong>建议：</strong></p><ul><li>先将<code>NexT</code>主题 <code>fork</code>到自己的仓库在克隆到本地，方便之后博客的备份和恢复，笔者已经将主题<code>fork</code>到了自己的仓库故地址由<code>https://github.com/theme-next/hexo-theme-next</code>—&gt;<code>git@github.com:seyvoue/hexo-theme-next.git</code></li><li>并在本地创建一个<code>dev</code>分支，并将 <code>dev</code> 分支作为日常的常用分支。这样的好处是，每当 NexT 版本升级时，你都先 pull 到 <code>master</code>，然后在将其合并到 <code>dev</code>，以保证<code>master</code>始终为官方稳定版，<code>dev</code>为博客定制版</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">git clone git@github.com:seyvoue/hexo-theme-next.git themes/next</span><br><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure><h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>与所有 Hexo 主题启用的模式一样(主题均统一放在 theme 目录下)。 当 克隆/下载 完成后，打开站点配置文件 <code>blog/_config.yml</code>， 找到 <code>theme</code> 字段，并将其值由默认的<code>landscape</code>更改为 <code>next</code>。</p><p><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2017-08-06-Pasted_Image_07_08_2017__00_40.png" alt=""></p><p>到此，NexT 主题安装完成。下一步我们将<strong>验证</strong>主题是否成功启用。在发布到 github 之前，建议先以本地调试的模式验证博客，如果没有问题，再将其部署到 github 中。</p><p>使用 <code>hexo server</code> 命令验证主题是否成功启用，你会发现主题已经切换成功。</p><p><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2017-08-06-164700.jpg" alt=""></p><p>主题切换成功后，便可将博客部署到 github 上了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ github clean</span><br><span class="line">$ github generate</span><br><span class="line">$ github deploy</span><br></pre></td></tr></table></figure><p>访问 <code>https://seyvoue.github.io</code> 或 <code>http://www.seyvoue.com</code>，此时的主题已经切换到 <code>NexT</code>了。</p><h2 id="备份博客"><a href="#备份博客" class="headerlink" title="备份博客"></a>备份博客</h2><p>Hexo 博客的目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy_git</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">├── themes</span><br><span class="line">├── _config.yml</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><p>在介绍如何备份博客前，我们有必要先了解 <code>hexo deploy</code> 这条命令会将哪些内容推送到 github 仓库中，这条命令会将<code>.deploy_git</code>中的所有内容上传到 github 的 master 分支。</p><p>所以，笔者采用给仓库<code>seyvoue.github.io</code>建立新分支<code>backup</code>的方法备份博客，Git相关操作请参考<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的Git教程</a>。</p><p>分别执行以下命令，将本地博客备份到仓库的 <code>backup</code> 分支：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>切换到博客根目录</span><br><span class="line">cd blog</span><br><span class="line"><span class="meta">#</span>在博客根目录下初始化生成 .git 目录</span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span>将本地的 git 仓库与远程 github 仓库关联</span><br><span class="line">git remote add git@github.com:seyvoue/seyvoue.github.io.git</span><br><span class="line"><span class="meta">#</span>将博客根目录的所有文件和文件提交到本地仓库</span><br><span class="line">git add -A</span><br><span class="line">git commit -m '博客备份'</span><br><span class="line"><span class="meta">#</span>将本地仓库上传到远程仓库的 backup 分支上</span><br><span class="line">git push -u origin master:backup</span><br></pre></td></tr></table></figure></p><p>完成上述的步骤后，笔者建议将 github 的默认分支由<code>master</code> -&gt; <code>backup</code>，以方便日后恢复博客。</p><p><strong>建议：</strong></p><ul><li>不要将全局配置文件<code>blog/_config.yml</code>上传到远程仓库<code>seyvoue.github.io</code>，因为该文件中可能包含有敏感信息</li><li>不要将 <code>themes</code> 目录内的内容上传到远程仓库<code>seyvoue.github.io</code> 中</li></ul><p>故修改<code>blog/.gitignore</code>文件为以下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">_config.yml</span><br><span class="line">themes/next/*</span><br></pre></td></tr></table></figure></p><p><strong>个人备份习惯：</strong>先备份博客根目录，再备份NexT；日常在本地的 writ_blog 分支更新博客，不要直接在 master 分支上操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#将博客根目录备份到 seyvoue.github.io 的 backup 分支</span><br><span class="line">cd blog</span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit</span><br><span class="line">git push -u origin master:backup</span><br><span class="line"></span><br><span class="line">#将主题 next 备份到 seyvoue/hexo-theme-next 的 backup 分支</span><br><span class="line">cd blog/themes/next</span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit</span><br><span class="line">git push -u origin write_blog:backup</span><br></pre></td></tr></table></figure><h2 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h2><p>step1：将博客克隆到本地（克隆前确认分支为 <code>backup</code> 而不是 <code>master</code>），假设当前目录为<code>~</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:seyvoue/seyvoue.github.io.git ~/workspace/blog</span><br><span class="line">cd blog</span><br><span class="line">git checkout -b write_blog origin/backup</span><br><span class="line"><span class="meta">#</span>记得复制之前备份在本机的 _config.yml 到 blog 目录下</span><br><span class="line"><span class="meta">#</span>因为.gitignore 文件是忽略上传全局的_config.yml 文件的</span><br><span class="line">git clone git@github.com:seyvoue/hexo-theme-next.git themes/next</span><br><span class="line">cd themes/next</span><br><span class="line">git checkout -b write_blog origin/backup</span><br><span class="line">git checkout -b master origin/master</span><br></pre></td></tr></table></figure></p><p>step2：安装必要的插件，恢复 node_modules<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>切换到博客根目录</span><br><span class="line"><span class="meta">$</span> cd blog</span><br><span class="line"><span class="meta">$</span> npm install -g hexo-cli</span><br><span class="line"><span class="meta">$</span> npm install</span><br></pre></td></tr></table></figure></p><p>因为笔者笔者部署 hexo 博客时，node 版本为 <code>v10.13.0</code>，npm 版本为 <code>v6.4.1</code>，所以执行 <code>npm install</code> 后，会根据 <code>package.json</code> 和 <code>package-lock.json</code> 这两个文件，安装所有之前安装过的依赖。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照前两篇博文便可成功搭建一个外网可访问的个人博客了，笔者将在接下来的两篇教程中，介绍如何对博客进行优化。Hexo 默认的主题 &lt;code&gt;landscape&lt;/code&gt;比较大众，本文将介绍如何更换博客的主题，以及如何进行博客的备份和恢复。&lt;/p&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="hexo" scheme="http://seyvoue.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>@手把手教你如何搭建个人博客（二）</title>
    <link href="http://seyvoue.com/manual/10566118.html"/>
    <id>http://seyvoue.com/manual/10566118.html</id>
    <published>2018-11-22T07:42:08.000Z</published>
    <updated>2019-06-09T07:11:51.692Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://seyvoue.com/manual/20408dc0.html">上一篇文章</a>中，笔者介绍了如何快速搭建一个本地博客，本文将介绍如何将你的博客部署到 github page 上（另外也介绍了如何同时部署到 github page 和 coding.net 上），以及如何绑定域名，使其可以像访问<code>http:/www.baidu.com</code> 一样，供所有人访问，而不仅仅只能在本地访问。</p><a id="more"></a><p>首先，你需要一个 github 账号，且本机已安装 git（git 的安装参考<a href="http://seyvoue.com/manual/7a97ce34.html">这篇文章</a>），具体注册过程本文略。如笔者的 github 账号的 username 为 <code>seyvoue</code>。</p><h2 id="在-github-上创建仓库"><a href="#在-github-上创建仓库" class="headerlink" title="在 github 上创建仓库"></a>在 github 上创建仓库</h2><p>在 github 上创建一个名为 <code>seyvoue.github.io</code> 的仓库。</p><p><strong>Note:</strong> 这里的仓库名必须严格按照 <code>username.github.io</code> 的形式命名。</p><h2 id="关联-github"><a href="#关联-github" class="headerlink" title="关联 github"></a>关联 github</h2><p>将本地的博客目录 <code>blog</code> 与刚创建的仓库关联。</p><p>step1：切换到你的博客根目录，安装 <code>hexo-deployer-git</code> 插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd blog</span><br><span class="line"><span class="meta">$</span> npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>step2：修改配置文件 <code>blog/config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:dog/dog.github.io.git,master</span><br></pre></td></tr></table></figure><p><strong>Note：</strong>此处的 <code>branch</code> 必须为 master，否则 github page 会 <code>build faied</code>。</p><p>若想同时部署在 <code>coding.net</code> 上，参考<a href="http://shomy.top/2016/03/03/hexo-in-coding-github/" target="_blank" rel="noopener">此文</a>，只需将配置文件修改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:seyvoue/seyvoue.github.io.git,master</span><br><span class="line">    coding: git@git.coding.net:seyvoue/seyvoue.git,master</span><br></pre></td></tr></table></figure><h2 id="将博客部署到-github-上"><a href="#将博客部署到-github-上" class="headerlink" title="将博客部署到 github 上"></a>将博客部署到 github 上</h2><p>每次你在本地写好博文后，依次执行以下命令，即可将博客发布到 github 上，并可通过 <code>http://dog.github.io</code> 访问你的博客。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo clean</span><br><span class="line"><span class="meta">$</span> hexo generate</span><br><span class="line"><span class="meta">$</span> hexo deploy</span><br></pre></td></tr></table></figure><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>step1: 申请域名<br>在<a href="https://wanwang.aliyun.com/?spm=5176.8142029.388261.444.715c4636EZdfD7" target="_blank" rel="noopener">万网</a>购买自己喜欢的域名（<code>.com</code>的会贵一点，<code>.site</code> 和 <code>.xyz</code>的相对便宜一些，有的只需要几块钱一年就可以），如笔者的域名为<code>seyvoue.com</code>。</p><p>step2：在 <code>blog/source/</code> 下创建 <code>CNAME</code> 文件，编辑其内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yoursite.com</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：不是 <code>http://www.yoursite.com</code></p></blockquote><p>step3：修改配置文件<code>blog/_config.yml</code>中的 <code>url</code>为申请的域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://seyvoue.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://seyvoue.com/manual/20408dc0.html&quot;&gt;上一篇文章&lt;/a&gt;中，笔者介绍了如何快速搭建一个本地博客，本文将介绍如何将你的博客部署到 github page 上（另外也介绍了如何同时部署到 github page 和 coding.net 上），以及如何绑定域名，使其可以像访问&lt;code&gt;http:/www.baidu.com&lt;/code&gt; 一样，供所有人访问，而不仅仅只能在本地访问。&lt;/p&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="hexo" scheme="http://seyvoue.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>@手把手教你如何搭建个人博客（一）</title>
    <link href="http://seyvoue.com/manual/20408dc0.html"/>
    <id>http://seyvoue.com/manual/20408dc0.html</id>
    <published>2018-11-22T07:42:02.000Z</published>
    <updated>2019-06-09T07:11:51.698Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何在本地快速的搭建一个基于 <code>Hexo</code> 的博客。你只需要用 <code>markdown</code> 语法写好博文，并保存在指定的文件夹中，然后输入 <code>hexo server</code> 命令，访问<code>http://localhost:4000/</code>，便可立刻看到生成的博客效果。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>要在本地搭建一个基于 <code>hexo</code> 的博客，你需要做好以下工作：</p><ul><li>安装 homebrew (参考<a href="http://seyvoue.com/manual/36d45381.html">@HomeBrew 的安装与使用</a>）</li><li>安装 node.js （参考<a href="http://seyvoue.com/manual/9e29d568.html">@Node.js的安装及其版本管理神器 nvm（macOS Mojave）</a></li><li>安装 hexo</li></ul><p>执行下面的命令，完成 <code>hexo</code> 的安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="搭建本地博客"><a href="#搭建本地博客" class="headerlink" title="搭建本地博客"></a>搭建本地博客</h2><p>先搭建一个可在本地访问的博客，使用 hexo 默认的主题。<a href="http://seyvoue.com/manual/10566118.html">@手把手教你如何搭建个人博客（二）</a> 将会继续介绍，如何将博客托管在 github 上，并绑定自己的域名，供所有人访问。</p><p>step1: 新建一个新的空白目录<code>blog</code>，作为<strong>博客根目录</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir blog</span><br></pre></td></tr></table></figure></p><p>step2: 依次执行下面的命令，部署本地 <code>hexo</code> 博客<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd blog</span><br><span class="line"><span class="meta">$</span> hexo init</span><br><span class="line"><span class="meta">$</span> npm install</span><br><span class="line"><span class="meta">$</span> hexo server</span><br></pre></td></tr></table></figure></p><p>执行完后，<code>blog</code> 目录下的结构如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tree . -L 1</span><br><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── db.json</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></p><p>恭喜！！！</p><p>至此，一个可本地访问的博客创建完毕。可通过访问 <code>http://localhost:4000/</code>，浏览所创建的博客内容，如下图：</p><p><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2017-08-06-165048.jpg" alt=""></p><h2 id="写博文"><a href="#写博文" class="headerlink" title="写博文"></a>写博文</h2><blockquote><p>那么如何在本地博客新增一篇博文呢？</p></blockquote><p>只需要执行下面的命令，即可创建一篇博文。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new post '博文的标题'</span><br><span class="line"><span class="meta">$</span> hexo s</span><br></pre></td></tr></table></figure><p>执行完<code>hexo new post &#39;博文的标题&#39;</code>后，hexo 会在 <code>source/_posts</code> 目录下创建一个 <code>.md</code> 文件，将博文内容以 <code>markdown</code> 语法，写在此文件中，并执行<code>hexo server</code>，博文便发布在你的博客上了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何在本地快速的搭建一个基于 &lt;code&gt;Hexo&lt;/code&gt; 的博客。你只需要用 &lt;code&gt;markdown&lt;/code&gt; 语法写好博文，并保存在指定的文件夹中，然后输入 &lt;code&gt;hexo server&lt;/code&gt; 命令，访问&lt;code&gt;http://localhost:4000/&lt;/code&gt;，便可立刻看到生成的博客效果。&lt;/p&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="hexo" scheme="http://seyvoue.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>@手把手教你如何搭建个人博客系列教程</title>
    <link href="http://seyvoue.com/manual/bb3e57d7.html"/>
    <id>http://seyvoue.com/manual/bb3e57d7.html</id>
    <published>2018-11-22T07:38:29.000Z</published>
    <updated>2019-06-09T07:11:51.710Z</updated>
    
    <content type="html"><![CDATA[<p>本文将以自己博客搭建的整个过程为例，手把手教你如何搭建一个基于 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a> 的个人独立博客。笔者用的是 <code>mac</code>，若你是 <code>windows</code> 用户，本系列教程可能不完全兼容，但整个搭建过程基本是类似的，你可以通过阅读本系列教程，了解搭建个人博客的大致流程。</p><a id="more"></a><p>这个系列教程包括以下内容：</p><blockquote><p><a href="http://seyvoue.com/manual/20408dc0.html">@手把手教你如何搭建个人博客（一）</a></p></blockquote><p>本文介绍如何在本地快速的搭建一个基于 <code>Hexo</code> 的博客。你只需要用 <code>markdown</code> 语法写好博文，并保存在指定的文件夹中，然后输入 <code>hexo server</code> 这段命令，访问<code>http://localhost:4000/</code>，便可立刻看到生成的博客效果。另外，本文还简单介绍了，如何发布一篇博文。</p><blockquote><p><a href="http://seyvoue.com/manual/10566118.html">@手把手教你如何搭建个人博客（二）</a></p></blockquote><p>在<a href="http://seyvoue.com/guildlines/20408dc0.html">上一篇文章</a>中，笔者介绍了如何快速搭建一个本地博客，本文将介绍如何将你的博客部署到 github page 上（另外也介绍了如何同时部署到 github page 和 coding.net 上），以及如何绑定域名，使其可以像访问<code>http://www.baidu.com</code> 一样，供所有人访问，而不仅仅只能在本地访问。</p><blockquote><p><a href="http://seyvoue.com/manual/5d48c24a.html">@手把手教你如何搭建个人博客（三）</a></p></blockquote><p>按照前两篇博文便可成功搭建一个外网可访问的个人博客了，笔者将在接下来的两篇教程中，介绍如何对博客进行优化。Hexo 默认的主题 <code>landscape</code>比较大众，本文将介绍如何更换博客的主题，以及如何进行博客的备份和恢复。</p><blockquote><p><a href="http://seyvoue.com/manual/ea65db2f.html">@手把手教你如何搭建个人博客（四）</a></p></blockquote><p>本文将以 Next 主题为例，教你如何进一步定制/优化自己的博客，扩展博客的功能，包括：</p><ul><li>添加 changelog 页</li><li>添加标签页</li><li>添加分类页</li><li>设置头像</li><li>侧边栏添加社交信息</li><li>修改博客底部建站时间和图标</li><li>设置代码高亮主题</li><li>增加代码块复制功能</li><li>增加代码块折叠功能</li><li>文章末尾增加版权信息页</li><li>添加打赏功能</li><li>唯一化链接</li><li>修改文章内链接文本样式</li><li>添加博文搜索功能</li><li>添加文章字数统计功能</li><li>添加文章阅读次数统计功能</li><li>文末添加评论功能</li><li>增加友情链接功能</li><li>设置网页 logo</li><li>增加 RSS 订阅功能</li></ul><p>要想最快的知道这些功能的效果，请移步我的个人博客：<code>www.seyvoue.com</code></p><p>我的博客最初创建于2017年8月，用的是 NexT 主题，集成了很多的插件。很多功能只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：<a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">next官网</a></p><p><strong>建议：</strong>若你是第一次自己搭建博客，建议按照笔者的系列教程的顺序，逐步完成，可以避免走一些不必要的坑。</p><blockquote><p><a href="http://seyvoue.com/manual/85fb1e68.html">@手把手教你如何搭建个人博客（五）</a></p></blockquote><p>本文主要介绍 Hexo 博客的SEO优化方法，让你的博客被 google 和 baidu 收录，并提高博文在搜索引擎的排名。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://blog.junyu.io/posts/0010-hexo-learn-from-Never-yu.html#icon" target="_blank" rel="noopener">Hexo博客设置进阶</a></li><li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo 官网</a></li><li><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next 官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将以自己博客搭建的整个过程为例，手把手教你如何搭建一个基于 &lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 的个人独立博客。笔者用的是 &lt;code&gt;mac&lt;/code&gt;，若你是 &lt;code&gt;windows&lt;/code&gt; 用户，本系列教程可能不完全兼容，但整个搭建过程基本是类似的，你可以通过阅读本系列教程，了解搭建个人博客的大致流程。&lt;/p&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="hexo" scheme="http://seyvoue.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>@python多版本管理及虚拟环境策略：homebrew + pyenv + pyenv-virtualenv（macOS Majave）</title>
    <link href="http://seyvoue.com/manual/77fe63cf.html"/>
    <id>http://seyvoue.com/manual/77fe63cf.html</id>
    <published>2018-11-19T18:39:02.000Z</published>
    <updated>2019-06-09T07:11:51.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>Python 解释器版本混乱, 2和3差别巨大, 而且细分版本也不尽相同, 难以选择和管理。</li><li>不同 Linux 发行版自带 Python 不同, 如 macOSX 自带 2.7 版本, 其中系统许多组件依赖于自带解释器, 一旦删除或者更改都可能会造成系统出问题。</li><li>不同的 Python 解释器软件包管理也是问题, 如 pip 和 ipython 等必备包组件, 而且在项目开发中如何保证不同的包环境互不干扰也是一个问题。</li></ul><p>那么有没有一个终极的解决办法能在管理不同解释器版本的同时控制不同的包环境呢? 有的, 就是 <code>pyenv</code>.</p><a id="more"></a><h3 id="pyenv-是什么-能干什么"><a href="#pyenv-是什么-能干什么" class="headerlink" title="pyenv 是什么? 能干什么?"></a>pyenv 是什么? 能干什么?</h3><blockquote><p><code>pyenv</code> 是一个 forked 自 ruby 社区的简单、低调、遵循 UNIX 哲学的Python 环境管理工具, 它可以轻松切换全局解释器版本, 同时结合 <code>vitualenv</code> 插件可以方便的管理对应的包源。</p></blockquote><p>使用 <code>pyenv</code> 我可以方便的下载指定版本的 python 解释器, pypy, anaconda 等, 可以随时自由的在 “shell环境、本地、全局”切换python解释器。</p><p>开发的时候不需要限定某个版本的虚拟环境, 只需要在部署的时候用 pyenv 指定某个版本就好了。</p><p><code>pyenv</code> 切换解释器版本的时候, pip 和 ipython 以及对应的包环境都是一起切换的, 所以如果你要同时运行 ipython2.x 和 ipython3.x 多个解释器验证一些代码时就很方便。</p><p><code>pyenv</code> 也可以创建好指定的虚拟环境, 但不需要指定具体目录, 自由度更高, 使用也简单。</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>如果要讲解pyenv的工作原理，基本上采用一句话就可以概括，那就是：修改系统环境变量<code>PATH</code>。</p><p>对于系统环境变量<code>PATH</code>，相信大家都不陌生，里面包含了一串由冒号分隔的路径，例如<code>/usr/local/bin:/usr/bin:/bin</code>。每当在系统中执行一个命令时，例如<code>python</code>或<code>pip</code>，操作系统就会在<code>PATH</code>的所有路径中从左至右依次寻找对应的命令。因为是依次寻找，因此排在左边的路径具有更高的优先级。</p><p>而<code>pyenv</code>做的，就是在<code>PATH</code>最前面插入一个<code>$(pyenv root)/shims</code>目录。这样，<code>pyenv</code>就可以通过控制<code>shims</code>目录中的Python版本号，来灵活地切换至我们所需的Python版本。</p><h2 id="如何安装？"><a href="#如何安装？" class="headerlink" title="如何安装？"></a>如何安装？</h2><h3 id="安装-pyenv"><a href="#安装-pyenv" class="headerlink" title="安装 pyenv"></a>安装 pyenv</h3><p>本文只介绍 mac 下利用 homebrew 的安装过程，其它系统安装过程大同小异，具体可参考官方的<a href="https://github.com/pyenv/pyenv#installation" target="_blank" rel="noopener">安装手册</a>。</p><p>step0: preinstall</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>确保本机已安装 xcode 且为最新版</span><br><span class="line">[mac]xcode-select --install</span><br><span class="line"><span class="meta">#</span>确保本机已安装相关依赖</span><br><span class="line">[mac]brew install zlib openssl readline xz sqlite</span><br></pre></td></tr></table></figure><p>step1: 安装 pyenv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mac] brew install pyenv</span><br></pre></td></tr></table></figure><p>step2: 在 <code>~/.zshrc</code> 添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#pyenv</span><br><span class="line">export PYENV_ROOT=$(brew --prefix pyenv)</span><br><span class="line">export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</span><br><span class="line">if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">  eval &quot;$(pyenv init -)&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>step3: 使 <code>.zshrc</code> 生效，并重新启动 shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mac] source ~/.zshrc</span><br><span class="line">[mac] exec $SHELL</span><br></pre></td></tr></table></figure><p>step4：验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mac]pyenv -v</span><br><span class="line">pyenv 1.2.8</span><br></pre></td></tr></table></figure><h4 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h4><blockquote><p>若遇到无法安装的问题可参考 <a href="https://medium.com/@pimterry/setting-up-pyenv-on-os-x-with-homebrew-56c7541fd331" target="_blank" rel="noopener">此文1</a> <a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems" target="_blank" rel="noopener">此文2</a>，即可解决。</p></blockquote><p>笔者在使用 <code>brew install pyenv</code> 后遇到以下问题：</p><ul><li>问题1：<br>笔者在安装 pyenv 之前，mac 中已装有以下 python：</li><li>系统自带的 python 2.7</li><li>homebrew 安装的 python@2 和 python3(python 3.7.1)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mac]pyenv install -l</span><br><span class="line">Available versions:</span><br><span class="line">/usr/local/bin/python-build: /usr/local/bin/sort: /usr/local/opt/python3/bin/python3.6: bad interpreter: No such file or directory</span><br></pre></td></tr></table></figure><p>于是，笔者便分别查看了文件<code>/usr/local/bin/python-build</code>和文件<code>/usr/local/bin/sort</code>，发现 <code>/usr/local/opt/python3/bin/</code> 中并没有 <code>python3.6</code>，只有 <code>python3.7</code>，于是手动 <code>ln -s [python3.7的 bin 路径] /usr/local/opt/python3/bin/python3.6</code>，修改后发现又出现了问题2。</p><ul><li>问题2</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mac]pyenv install -l</span><br><span class="line">Available versions:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/local/bin/sort", line 7, in &lt;module&gt;</span><br><span class="line">    from sort import cli</span><br><span class="line">ModuleNotFoundError: No module named 'sort'</span><br></pre></td></tr></table></figure><p>于是，<code>vi /usr/local/bin/sort</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cli</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'This is suroegin'</span>s package - sort<span class="string">')</span></span><br></pre></td></tr></table></figure><p>没发现有什么问题，试着将<code>print(&#39;This is suroegin&#39;s package - sort&#39;)</code> -&gt; <code>print(&quot;This is suroegin&#39;s package - sort&quot;)</code>，又出现了问题3。</p><ul><li>问题3<br>具体的报错信息忘记了，大致包含以下关键词：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mac]pyenv install -l</span><br><span class="line">unmatched &apos;</span><br></pre></td></tr></table></figure><p><strong>最后</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mac]pip3 uninstall sort</span><br></pre></td></tr></table></figure><p>所有问题就解决了。</p><blockquote><p>总结：因为笔者之前有安装 python，导致安装 pyenv 后，pyenv 的相关依赖使用了笔者系统中已安装的模块，以致出现相关依赖问题。所以，一个好的版本管理策略是多么重要，仅仅依赖 homebrew 的 <code>brew switch python 3.x.x</code> 并不能从根本上解决 python 的版本管理问题。</p></blockquote><h3 id="安装-pyenv-virtualenv"><a href="#安装-pyenv-virtualenv" class="headerlink" title="安装 pyenv-virtualenv"></a>安装 pyenv-virtualenv</h3><p>step1: install</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mac]brew install pyenv-virtualenv</span><br></pre></td></tr></table></figure><p>step2: 修改 <code>~/.zshrc</code>为以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#pyenv</span><br><span class="line">export PYENV_ROOT=$(brew --prefix pyenv)</span><br><span class="line">export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</span><br><span class="line">if which pyenv 1&gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">  eval &quot;$(pyenv init -)&quot;</span><br><span class="line">fi</span><br><span class="line">if which pyenv-virtualenv-init &gt; /dev/null; then</span><br><span class="line">  eval &quot;$(pyenv virtualenv-init -)&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>step3: 使 <code>.zshrc</code> 生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[mac]$</span> source ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="pyenv-常用命令"><a href="#pyenv-常用命令" class="headerlink" title="pyenv 常用命令"></a>pyenv 常用命令</h3><p>pyenv 的主要功能如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pyenv -h</span><br><span class="line">Usage: pyenv &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Some useful pyenv commands are:</span><br><span class="line">   commands    List all available pyenv commands</span><br><span class="line">   local       Set or show the local application-specific Python version</span><br><span class="line">   global      Set or show the global Python version</span><br><span class="line">   shell       Set or show the shell-specific Python version</span><br><span class="line">   install     Install a Python version using python-build</span><br><span class="line">   uninstall   Uninstall a specific Python version</span><br><span class="line">   rehash      Rehash pyenv shims (run this after installing executables)</span><br><span class="line">   version     Show the current Python version and its origin</span><br><span class="line">   versions    List all Python versions available to pyenv</span><br><span class="line">   which       Display the full path to an executable</span><br><span class="line">   whence      List all Python versions that contain the given executable</span><br><span class="line"></span><br><span class="line">See `pyenv help &lt;command&gt;' for information on a specific command.</span><br><span class="line">For full documentation, see: https://github.com/pyenv/pyenv#readme</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前激活的是那个版本的Python</span><br><span class="line">pyenv version</span><br><span class="line"></span><br><span class="line"># 查看所有已安装的版本</span><br><span class="line">pyenv versions</span><br><span class="line"></span><br><span class="line"># 查看所有可安装的版本</span><br><span class="line">pyenv install --list</span><br><span class="line"></span><br><span class="line"># 安装指定版本</span><br><span class="line">pyenv install 3.6.5</span><br><span class="line"># 安装完成后必须rehash</span><br><span class="line">pyenv rehash</span><br><span class="line"></span><br><span class="line"># 删除指定版本</span><br><span class="line">pyenv uninstall 3.5.2</span><br><span class="line"></span><br><span class="line"># 指定局部版本，当前目录生效</span><br><span class="line">pyenv local 3.6.5</span><br><span class="line"></span><br><span class="line"># 指定全局版本，整个系统生效</span><br><span class="line">pyenv global 3.6.5</span><br><span class="line"></span><br><span class="line"># 指定多个全局版本, 3版本优先</span><br><span class="line">pyenv global 3.6.5 2.7.14</span><br><span class="line"></span><br><span class="line"># 取消设置</span><br><span class="line">pyenv local --unset</span><br><span class="line"></span><br><span class="line"># 实际上当你切换版本后, 相应的pip和包仓库都是会自动切换过去的</span><br></pre></td></tr></table></figure><h3 id="使用-pyenv：切换-python-版本"><a href="#使用-pyenv：切换-python-版本" class="headerlink" title="使用 pyenv：切换 python 版本"></a>使用 pyenv：切换 python 版本</h3><p><code>pyenv</code> 可以从三个维度来管理Python环境，简称为：<code>当前系统(global)</code>、<code>当前目录(local)</code>、<code>当前shell</code>。这三个维度的优先级从左到右依次升高，即<code>当前系统</code>的优先级最低、<code>当前shell</code>的优先级最高。</p><p>如果想修改系统全局的Python环境，可以采用 <code>pyenv global PYTHON_VERSION</code> 命令。该命令执行后会在 <code>$(pyenv root)</code> 目录中创建一个名为 <code>version</code> 的文件（如果该文件已存在，则修改该文件的内容），里面记录着系统全局的Python版本号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[mac]$</span> pyenv global system</span><br><span class="line"><span class="meta">[mac]$</span> cat $(pyenv root)/version</span><br><span class="line">system</span><br><span class="line"><span class="meta">[mac]$</span> pyenv version</span><br><span class="line">system (set by /usr/local/opt/pyenv/version)</span><br></pre></td></tr></table></figure><p>通常情况下，对于特定的项目，我们可能需要切换不同的Python环境，这个时候就可以通过<code>pyenv local PYTHON_VERSION</code> 命令来修改<code>当前目录</code>的Python环境。命令执行后，会在当前目录中生成一个<code>.python-version</code>文件（如果该文件已存在，则修改该文件的内容），里面记录着当前目录使用的Python版本号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[mac]$</span> cd ~/workspace/test-pyenv</span><br><span class="line">[mac]pyenv local 2.7.8</span><br><span class="line"><span class="meta">[mac]$</span> cat .python-version</span><br><span class="line">2.7.8</span><br><span class="line"><span class="meta">[mac]$</span> pyenv version</span><br><span class="line">2.7.8 (set by /Users/seyvoue/workspace/test-pyenv/.python-version)</span><br><span class="line"><span class="meta">[mac]$</span> pip -V</span><br><span class="line">pip 18.1 from /usr/local/opt/pyenv/versions/2.7.8/lib/python2.7/site-packages/pip (python 2.7)</span><br></pre></td></tr></table></figure><p>可以看出，<code>当前目录</code>中的<code>.python-version</code>配置优先于系统全局的<code>$(pyenv root)/version</code>配置。</p><p>另外一种情况，通过执行 <code>pyenv shell PYTHON_VERSION</code> 命令，可以修改当前shell的Python环境。执行该命令后，会在当前shell session（Terminal窗口）中创建一个名为<code>PYENV_VERSION</code> 的环境变量，然后在当前shell的任意目录中都会采用该环境变量设定的Python版本。此时，<code>当前系统</code>和<code>当前目录</code>中设定的Python版本均会被忽略。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[mac]$</span> cd ~/workspace/test-pyenv</span><br><span class="line">[mac]pyenv local 2.7.8</span><br><span class="line"><span class="meta">[mac]$</span> cat .python-version</span><br><span class="line">2.7.8</span><br><span class="line"><span class="meta">[mac]$</span> pyenv version</span><br><span class="line">2.7.8 (set by /Users/seyvoue/workspace/test-pyenv/.python-version)</span><br><span class="line"><span class="meta">[mac]$</span> echo $PYENV_VERSION</span><br><span class="line"></span><br><span class="line"><span class="meta">[mac]$</span> pyenv shell 3.7.1</span><br><span class="line"><span class="meta">[mac]$</span> echo $PYENV_VERSION</span><br><span class="line">3.7.1</span><br><span class="line"><span class="meta">[mac]$</span> cat .python-version</span><br><span class="line">2.7.8</span><br><span class="line"><span class="meta">[mac]$</span> pyenv version</span><br><span class="line">3.7.1 (set by PYENV_VERSION environment variable)</span><br></pre></td></tr></table></figure><p>顾名思义，<code>当前shell</code>的Python环境仅在当前shell中生效，重新打开一个新的shell后，该环境也就失效了。如果想在<code>当前shell</code>中取消shell级别的Python环境，采用<code>unset</code>命令重置<code>PYENV_VERSION</code>环境变量即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat .python-version</span><br><span class="line">2.7.8</span><br><span class="line"><span class="meta">[mac]$</span> pyenv version</span><br><span class="line">3.7.1 (set by PYENV_VERSION environment variable)</span><br><span class="line"><span class="meta">[mac]$</span> unset PYENV_VERSION</span><br><span class="line">2.7.8 (set by /Users/seyvoue/workspace/test-pyenv/.python-version)</span><br></pre></td></tr></table></figure><p>特别建议：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">系统全局用系统默认的Python比较好，不建议直接对其操作</span><br><span class="line">pyenv global system</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用local进行指定版本切换，一般开发环境使用。</span><br><span class="line">pyenv local 2.7.10</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对当前用户的临时设定Python版本，退出后失效</span><br><span class="line">pyenv shell 3.5.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">取消某版本切换</span><br><span class="line">pyenv local 3.5.0 --unset</span><br></pre></td></tr></table></figure><blockquote><p>输入python即可使用新版本的python<br>系统自带的脚本会以 <code>/usr/bin/python</code> 的方式直接调用老版本的python，因而不会对系统脚本产生影响；<br>如果通过homebrew安装python，那么pip会同时安装。</p></blockquote><h3 id="使用-pyenv-virtualenv：管理多个依赖库环境"><a href="#使用-pyenv-virtualenv：管理多个依赖库环境" class="headerlink" title="使用 pyenv-virtualenv：管理多个依赖库环境"></a>使用 pyenv-virtualenv：管理多个依赖库环境</h3><p>经过以上操作，我们在本地计算机中就可以安装多个版本的Python运行环境，并可以按照实际需求进行灵活地切换。然而，很多时候在同一个Python版本下，我们仍然希望能根据项目进行环境分离，在pyenv中，pyenv-virtualenv 插件可以实现这个功能。</p><p>使用方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pyenv virtualenv PYTHON_VERSION PROJECT_NAME</span><br></pre></td></tr></table></figure><p>其中，<code>PYTHON_VERSION</code>是具体的Python版本号，例如，<code>3.7.1</code>，<code>PROJECT_NAME</code>是我们自定义的项目名称。比较好的实践方式是，在<code>PROJECT_NAME</code>也带上Python的版本号，以便于识别。</p><p>现假设我们有<code>test-pyenv</code>这么一个项目，想针对<code>Python 2.7.8</code>和<code>Python 3.7.1</code>分别创建一个虚拟环境，那就可以依次执行如下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pyenv virtualenv 3.7.1 py37_test-pyenv</span><br><span class="line"><span class="meta">$</span> pyenv virtualenv 2.7.8 py27_test-pyenv</span><br></pre></td></tr></table></figure><p>创建完成后，通过执行<code>pyenv virtualenvs</code>命令，就可以看到本地所有的项目环境。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pyenv virtualenvs </span><br><span class="line">2.7.8/envs/py27_test-pyenv (created from /usr/local/opt/pyenv/versions/2.7.8)</span><br><span class="line">3.7.1/envs/py37_test-pyenv (created from /usr/local/opt/pyenv/versions/3.7.1)</span><br><span class="line">py27_test-pyenv (created from /usr/local/opt/pyenv/versions/2.7.8)</span><br><span class="line">py37_test-pyenv (created from /usr/local/opt/pyenv/versions/3.7.1)</span><br></pre></td></tr></table></figure><p>通过这种方式，在同一个Python版本下我们也可以创建多个虚拟环境，然后在各个虚拟环境中分别维护依赖库环境。</p><p>例如，<code>py37_test-pyenv</code>虚拟环境位于<code>$(pyenv root)/versions/3.7.1/envs</code>目录下，而其依赖库位于<code>$(pyenv root)/versions/3.7.1/lib/python3.7/site-packages</code>中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd ~/workspace/test-pyenv</span><br><span class="line"><span class="meta">$</span> pyenv version</span><br><span class="line">2.7.8 (set by /Users/seyvoue/workspace/test-pyenv/.python-version)</span><br><span class="line"><span class="meta">$</span> pip -V</span><br><span class="line">pip 18.1 from /usr/local/opt/pyenv/versions/2.7.8/lib/python2.7/site-packages/pip (python 2.7)</span><br></pre></td></tr></table></figure><p>后续在项目开发过程中，我们就可以通过<code>pyenv local XXX</code>或<code>pyenv activate PROJECT_NAME</code>命令来切换项目的Python环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd ~/workspace/test-pyenv</span><br><span class="line"><span class="meta">$</span> pyenv local py37_test-pyenv</span><br><span class="line"><span class="meta">$</span> pyenv version</span><br><span class="line">py37_test-pyenv (set by /Users/seyvoue/workspace/test-pyenv/.python-version)</span><br><span class="line"><span class="meta">$</span> python -V</span><br><span class="line">Python 3.7.1</span><br><span class="line"><span class="meta">$</span> pip -V</span><br><span class="line">pip 10.0.1 from /usr/local/opt/pyenv/versions/3.7.1/envs/py37_test-pyenv/lib/python3.7/site-packages/pip (python 3.7)</span><br></pre></td></tr></table></figure><p>可以看出，切换环境后，pip命令对应的目录也随之改变，即始终对应着当前的Python虚拟环境。</p><p>对应的，采用<code>pyenv deactivate</code>命令退出当前项目的Python虚拟环境。</p><p>如果想移除某个项目环境，可以通过如下命令实现。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pyenv uninstall PROJECT_NAME</span><br></pre></td></tr></table></figure><p>以上便是日常开发工作中常用的pyenv命令，基本可以满足绝大多数依赖库环境管理方面的需求。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://debugtalk.com/post/use-pyenv-manage-multiple-python-virtualenvs/#%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E4%BE%9D%E8%B5%96%E5%BA%93%E7%8E%AF%E5%A2%83" target="_blank" rel="noopener">使用pyenv管理多个Python版本依赖环境</a></li><li><a href="https://zhuanlan.zhihu.com/p/36402791" target="_blank" rel="noopener">Python版本管理神器-pyenv</a></li><li><a href="https://github.com/pyenv/pyenv#pyenv-does" target="_blank" rel="noopener">Simple Python Version Management: pyenv, from github</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Python 解释器版本混乱, 2和3差别巨大, 而且细分版本也不尽相同, 难以选择和管理。&lt;/li&gt;
&lt;li&gt;不同 Linux 发行版自带 Python 不同, 如 macOSX 自带 2.7 版本, 其中系统许多组件依赖于自带解释器, 一旦删除或者更改都可能会造成系统出问题。&lt;/li&gt;
&lt;li&gt;不同的 Python 解释器软件包管理也是问题, 如 pip 和 ipython 等必备包组件, 而且在项目开发中如何保证不同的包环境互不干扰也是一个问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么有没有一个终极的解决办法能在管理不同解释器版本的同时控制不同的包环境呢? 有的, 就是 &lt;code&gt;pyenv&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="python" scheme="http://seyvoue.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>@解决 Oracle Net Configuration Assistant Failed 问题</title>
    <link href="http://seyvoue.com/manual/428b54b1.html"/>
    <id>http://seyvoue.com/manual/428b54b1.html</id>
    <published>2018-11-13T01:42:32.000Z</published>
    <updated>2019-06-09T07:11:51.697Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>现象1：在安装 oracle 12c 时，出现 <code>Oracle Net Configuration Assistant Failed</code> 下图<br><img src="http://ipic-markdown.oss-cn-shanghai.aliyuncs.com/blog/2018-11-12-181958.png" alt=""></p><p>现象2：执行 <code>lsnrctl status</code>，出现 <code>TNS-12541</code>无监听，如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[oracle@oem ~]$ lsnrctl status listener</span><br><span class="line">LSNRCTL for Linux: Version 11.1.0.6.0 - Production on 22-NOV-2009 13:18:35</span><br><span class="line">Copyright (c) 1991, 2007, Oracle.  All rights reserved.</span><br><span class="line">Connecting to (ADDRESS=(PROTOCOL=tcp)(HOST=)(PORT=1521))</span><br><span class="line">TNS-12541: TNS:no listener</span><br><span class="line"> TNS-12560: TNS:protocol adapter error</span><br><span class="line">  TNS-00511: No listener</span><br><span class="line">   Linux Error: 111: Connection refused</span><br></pre></td></tr></table></figure></p><p>或者出现<code>The listener supports no services</code>，如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[oracle@oem ~]$ lsnrctl status</span><br><span class="line"></span><br><span class="line">LSNRCTL for Linux: Version 12.1.0.2.0 - Production on 13-NOV-2018 04:10:23</span><br><span class="line"></span><br><span class="line">Copyright (c) 1991, 2014, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=oem.com)(PORT=1521)))</span><br><span class="line">STATUS of the LISTENER</span><br><span class="line">------------------------</span><br><span class="line">Alias                     LISTENER</span><br><span class="line">Version                   TNSLSNR for Linux: Version 12.1.0.2.0 - Production</span><br><span class="line">Start Date                13-NOV-2018 04:06:01</span><br><span class="line">Uptime                    0 days 0 hr. 4 min. 22 sec</span><br><span class="line">Trace Level               off</span><br><span class="line">Security                  ON: Local OS Authentication</span><br><span class="line">SNMP                      OFF</span><br><span class="line">Listener Parameter File   /u01/app/oracle/product/12.1.0/dbhome_1/network/admin/listener.ora</span><br><span class="line">Listener Log File         /u01/app/oracle/diag/tnslsnr/oem/listener/alert/log.xml</span><br><span class="line">Listening Endpoints Summary...</span><br><span class="line">  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oem.com)(PORT=1521)))</span><br><span class="line">  (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521)))</span><br><span class="line">The listener supports no services</span><br><span class="line">The command completed successfully</span><br></pre></td></tr></table></figure></p><p>现象3：<code>/u01/app/oracle/product/12.1.0/dbhome_1/network/admin/</code> 目录下没有 <code>listener.ora</code> 文件</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在 macos 上打开一个新的终端，运行 <code>net configuration assistant</code> 向导程序。执行以下内容：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh -Y oracle@192.168.12.174</span><br><span class="line">oracle@192.168.12.174's password:</span><br><span class="line">Last login: Tue Nov 13 04:04:24 2018</span><br><span class="line">[oracle@oem ~]$ /u01/app/oracle/product/12.1.0/dbhome_1/bin/netca</span><br></pre></td></tr></table></figure></p><blockquote><p>注：mac 上需要安装 <code>xquartz</code>，否则无法运行 netca GUI 向导界面</p></blockquote><p>然后，按照<a href="http://blog.51cto.com/werewolftj/1591893" target="_blank" rel="noopener">此文</a>一步一步操作即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;现象1：在安装 oracle 12c 时，出现 &lt;code&gt;Oracle Net Con
      
    
    </summary>
    
      <category term="manual" scheme="http://seyvoue.com/categories/manual/"/>
    
    
      <category term="oracle" scheme="http://seyvoue.com/tags/oracle/"/>
    
  </entry>
  
</feed>
